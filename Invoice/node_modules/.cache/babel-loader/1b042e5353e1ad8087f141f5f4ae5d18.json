{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport API from \"src/axios/axios\";\nvar initialState = {\n  providerData: [],\n  isDataChanged: false\n};\nvar providerSlice = createSlice({\n  name: \"provider\",\n  initialState: initialState,\n  reducers: {\n    getData: function getData(state, action) {\n      state.providerData = action.payload.data;\n    }\n  }\n});\nexport default providerSlice;\nexport var getProviderData = function getProviderData() {\n  return function (dispatch) {\n    API.get(\"provider/get\").then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(response.data.data.data);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/cartDna_app/cart-dna-frontend/src/store/provider-slice.js"],"names":["createSlice","API","initialState","providerData","isDataChanged","providerSlice","name","reducers","getData","state","action","payload","data","getProviderData","dispatch","get","then","response","http_status","catch","error","console","log"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,IAAMC,aAAa,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,UAD0B;AAEhCJ,EAAAA,YAAY,EAAZA,YAFgC;AAGhCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ,mBACAC,KADA,EACOC,MADP,EACe;AACrBD,MAAAA,KAAK,CAACN,YAAN,GAAqBO,MAAM,CAACC,OAAP,CAAeC,IAApC;AACD;AAHO;AAHsB,CAAD,CAAjC;AAUA,eAAeP,aAAf;AAEA,OAAO,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO,UAACC,QAAD,EAAc;AACnBb,IAAAA,GAAG,CAACc,GAAJ,CAAQ,cAAR,EACGC,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACL,IAAT,CAAcM,WAAd,KAA8B,GAAlC,EAAuC;AACtCJ,QAAAA,QAAQ,CAACG,QAAQ,CAACL,IAAT,CAAcA,IAAd,CAAmBA,IAApB,CAAR;AACA;AACF,KALH,EAMGO,KANH,CAMS,UAACC,KAAD,EAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KARH;AASD,GAVD;AAWD,CAZM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\n\r\nconst initialState = {\r\n  providerData: [],\r\n  isDataChanged: false,\r\n};\r\n\r\nconst providerSlice = createSlice({\r\n  name: \"provider\",\r\n  initialState,\r\n  reducers: {\r\n    getData(state, action) {\r\n      state.providerData = action.payload.data;\r\n    },\r\n  },\r\n});\r\n\r\nexport default providerSlice;\r\n\r\nexport const getProviderData = () => {\r\n  return (dispatch) => {\r\n    API.get(\"provider/get\")\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n         dispatch(response.data.data.data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}