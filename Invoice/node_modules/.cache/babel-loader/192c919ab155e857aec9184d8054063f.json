{"ast":null,"code":"import _regeneratorRuntime from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { shopStoreAction } from \"./store\";\nvar initialState = {\n  shop: {\n    product: [],\n    isDataReceived: false,\n    param: \"\",\n    productId: 0\n  },\n  reRunComponent: {\n    isDataChanged: true\n  },\n  singaleProductData: {\n    data: \"\"\n  },\n  order: {\n    data: [],\n    isDataReceived: false,\n    param: \"\",\n    status: \"all\"\n  }\n};\nvar shopSlice = createSlice({\n  name: \"shop\",\n  initialState: initialState,\n  reducers: {\n    sendRequest: function sendRequest(state) {\n      state.shop = _objectSpread(_objectSpread({}, state.shop), {}, {\n        isDataReceived: false\n      });\n    },\n    getStoreProduct: function getStoreProduct(state, action) {\n      state.shop = _objectSpread(_objectSpread({}, state.shop), {}, {\n        product: action.payload.data\n      });\n    },\n    getResponse: function getResponse(state) {\n      state.shop = _objectSpread(_objectSpread({}, state.shop), {}, {\n        isDataReceived: true\n      });\n    },\n    updateParam: function updateParam(state, action) {\n      state.shop = _objectSpread(_objectSpread({}, state.shop), {}, {\n        param: action.payload.param\n      });\n    },\n    getSingleProductData: function getSingleProductData(state, action) {\n      state.singaleProductData = {\n        data: action.payload.data\n      };\n    },\n    updateProductId: function updateProductId(state, action) {\n      state.shop = _objectSpread(_objectSpread({}, state.shop), {}, {\n        productId: action.payload.id\n      });\n      console.log(state.shop);\n    }\n  }\n});\nexport default shopSlice;\nexport var getStoreProductData = function getStoreProductData(param) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var url, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(shopStoreAction.sendRequest());\n              _context.prev = 1;\n              url = getUrl(\"store/get-products/6\", param);\n              _context.next = 5;\n              return getApi(url);\n\n            case 5:\n              response = _context.sent;\n              dispatch(shopStoreAction.getStoreProduct({\n                data: response.data.data\n              }));\n              dispatch(shopStoreAction.getResponse());\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0.response);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/shop-slice.js"],"names":["createSlice","getApi","getUrl","shopStoreAction","initialState","shop","product","isDataReceived","param","productId","reRunComponent","isDataChanged","singaleProductData","data","order","status","shopSlice","name","reducers","sendRequest","state","getStoreProduct","action","payload","getResponse","updateParam","getSingleProductData","updateProductId","id","console","log","getStoreProductData","dispatch","url","response"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { shopStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  shop: {\r\n    product: [],\r\n    isDataReceived: false,\r\n    param: \"\",\r\n    productId: 0,\r\n  },\r\n\r\n  reRunComponent: {\r\n    isDataChanged: true,\r\n  },\r\n  singaleProductData: {\r\n    data: \"\",\r\n  },\r\n  order:{\r\n    data:[],\r\n    isDataReceived:false,\r\n    param:\"\",\r\n    status:\"all\",\r\n    \r\n  }\r\n};\r\n\r\nconst shopSlice = createSlice({\r\n  name: \"shop\",\r\n  initialState,\r\n  reducers: {\r\n    sendRequest(state) {\r\n      state.shop = {\r\n        ...state.shop,\r\n        isDataReceived: false,\r\n      };\r\n    },\r\n    getStoreProduct(state, action) {\r\n      state.shop = {\r\n        ...state.shop,\r\n        product: action.payload.data,\r\n      };\r\n    },\r\n    getResponse(state) {\r\n      state.shop = {\r\n        ...state.shop,\r\n        isDataReceived: true,\r\n      };\r\n    },\r\n    updateParam(state, action) {\r\n      state.shop = {\r\n        ...state.shop,\r\n        param: action.payload.param,\r\n      };\r\n    },\r\n    getSingleProductData(state, action) {\r\n      state.singaleProductData = {\r\n        data: action.payload.data,\r\n      };\r\n    },\r\n    updateProductId(state, action) {\r\n      state.shop = {\r\n        ...state.shop,\r\n        productId: action.payload.id,\r\n      };\r\n      console.log(state.shop);\r\n    },\r\n  },\r\n});\r\nexport default shopSlice;\r\n\r\nexport const getStoreProductData = (param) => {\r\n  return async (dispatch) => {\r\n    dispatch(shopStoreAction.sendRequest());\r\n    try {\r\n      const url = getUrl(`store/get-products/6`, param);\r\n      const response = await getApi(url);\r\n      dispatch(\r\n        shopStoreAction.getStoreProduct({\r\n          data: response.data.data,\r\n        })\r\n      );\r\n      dispatch(shopStoreAction.getResponse());\r\n    } catch (error) {\r\n      console.log(error.response);\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}