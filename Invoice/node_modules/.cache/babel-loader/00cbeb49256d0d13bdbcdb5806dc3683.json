{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport API from \"src/axios/axios\";\nimport { postStoreAction } from \"./store\";\nvar initialState = {\n  isPostDataLoaded: false,\n  postData: [],\n  reRunPostComponent: true,\n  postModalData: {\n    postData: \"\",\n    postId: 0,\n    ModalHeading: \"\",\n    ModalAction: \"\",\n    isModalOpen: false,\n    variant: \"\"\n  },\n  updatePost: updatePost\n};\nvar postSlice = createSlice({\n  name: \"posts\",\n  initialState: initialState,\n  reducers: {\n    getData: function getData(state, action) {\n      state.isPostDataLoaded = true;\n      state.postData = action.payload.post;\n    },\n    openPostEditModal: function openPostEditModal(state, action) {\n      state.postModalData = {\n        postData: action.payload.postData,\n        postId: action.payload.id,\n        ModalAction: action.payload.action,\n        isModalOpen: true,\n        ModalHeading: action.payload.action === \"Update\" ? \"Update the Post\" : \"Delete the post\",\n        variant: action.payload.action === \"Update\" ? \"primary\" : \"danger\"\n      };\n      console.log(state.postModalData);\n    },\n    updatingModalData: function updatingModalData(state) {}\n  }\n});\nexport default postSlice;\nexport var getPostData = function getPostData() {\n  var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return function (dispatch) {\n    var url = \"posts/get-posts\";\n\n    if (param) {\n      url = \"posts/get-posts?\".concat(param);\n    }\n\n    API.get(url).then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(postStoreAction.getData({\n          post: response.data.data\n        }));\n      }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var openPostModal = function openPostModal(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.openPostEditModal(data));\n  };\n};\nexport var updatePostModalData = function updatePostModalData(data) {\n  return function (dispatch) {};\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/post.slice.js"],"names":["createSlice","API","postStoreAction","initialState","isPostDataLoaded","postData","reRunPostComponent","postModalData","postId","ModalHeading","ModalAction","isModalOpen","variant","updatePost","postSlice","name","reducers","getData","state","action","payload","post","openPostEditModal","id","console","log","updatingModalData","getPostData","param","dispatch","url","get","then","response","data","http_status","catch","error","message","openPostModal","updatePostModalData"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,gBAAgB,EAAE,KADC;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,kBAAkB,EAAE,IAHD;AAInBC,EAAAA,aAAa,EAAE;AACbF,IAAAA,QAAQ,EAAE,EADG;AAEbG,IAAAA,MAAM,EAAE,CAFK;AAGbC,IAAAA,YAAY,EAAE,EAHD;AAIbC,IAAAA,WAAW,EAAE,EAJA;AAKbC,IAAAA,WAAW,EAAE,KALA;AAMbC,IAAAA,OAAO,EAAE;AANI,GAJI;AAYnBC,EAAAA,UAAU,EAAVA;AAZmB,CAArB;AAeA,IAAMC,SAAS,GAAGd,WAAW,CAAC;AAC5Be,EAAAA,IAAI,EAAE,OADsB;AAE5BZ,EAAAA,YAAY,EAAZA,YAF4B;AAG5Ba,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OADQ,mBACAC,KADA,EACOC,MADP,EACe;AACrBD,MAAAA,KAAK,CAACd,gBAAN,GAAyB,IAAzB;AACAc,MAAAA,KAAK,CAACb,QAAN,GAAiBc,MAAM,CAACC,OAAP,CAAeC,IAAhC;AACD,KAJO;AAKRC,IAAAA,iBALQ,6BAKUJ,KALV,EAKiBC,MALjB,EAKyB;AAC/BD,MAAAA,KAAK,CAACX,aAAN,GAAsB;AACpBF,QAAAA,QAAQ,EAAEc,MAAM,CAACC,OAAP,CAAef,QADL;AAEpBG,QAAAA,MAAM,EAAEW,MAAM,CAACC,OAAP,CAAeG,EAFH;AAGpBb,QAAAA,WAAW,EAAES,MAAM,CAACC,OAAP,CAAeD,MAHR;AAIpBR,QAAAA,WAAW,EAAE,IAJO;AAKpBF,QAAAA,YAAY,EACVU,MAAM,CAACC,OAAP,CAAeD,MAAf,KAA0B,QAA1B,GACI,iBADJ,GAEI,iBARc;AASpBP,QAAAA,OAAO,EAAEO,MAAM,CAACC,OAAP,CAAeD,MAAf,KAA0B,QAA1B,GAAqC,SAArC,GAAiD;AATtC,OAAtB;AAWAK,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACX,aAAlB;AACD,KAlBO;AAmBRmB,IAAAA,iBAnBQ,6BAmBUR,KAnBV,EAmBgB,CAEvB;AArBO;AAHkB,CAAD,CAA7B;AA4BA,eAAeJ,SAAf;AAEA,OAAO,IAAMa,WAAW,GAAG,SAAdA,WAAc,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACzC,SAAO,UAACC,QAAD,EAAc;AACnB,QAAIC,GAAG,GAAG,iBAAV;;AACA,QAAIF,KAAJ,EAAW;AACTE,MAAAA,GAAG,6BAAsBF,KAAtB,CAAH;AACD;;AACD3B,IAAAA,GAAG,CAAC8B,GAAJ,CAAQD,GAAR,EACGE,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAd,KAA8B,GAAlC,EAAuC;AACrCN,QAAAA,QAAQ,CAAC3B,eAAe,CAACe,OAAhB,CAAwB;AAAEI,UAAAA,IAAI,EAAEY,QAAQ,CAACC,IAAT,CAAcA;AAAtB,SAAxB,CAAD,CAAR;AACD;AACF,KALH,EAMGE,KANH,CAMS,UAACC,KAAD,EAAW;AAChBb,MAAAA,OAAO,CAACC,GAAR,CAAYY,KAAK,CAACC,OAAlB;AACD,KARH;AASD,GAdD;AAeD,CAhBM;AAkBP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACL,IAAD,EAAU;AACrC,SAAO,UAACL,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAAC3B,eAAe,CAACoB,iBAAhB,CAAkCY,IAAlC,CAAD,CAAR;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACN,IAAD,EAAU;AAC3C,SAAO,UAAAL,QAAQ,EAAG,CAEjB,CAFD;AAGD,CAJM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\nimport { postStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isPostDataLoaded: false,\r\n  postData: [],\r\n  reRunPostComponent: true,\r\n  postModalData: {\r\n    postData: \"\",\r\n    postId: 0,\r\n    ModalHeading: \"\",\r\n    ModalAction: \"\",\r\n    isModalOpen: false,\r\n    variant: \"\",\r\n  },\r\n  updatePost\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    getData(state, action) {\r\n      state.isPostDataLoaded = true;\r\n      state.postData = action.payload.post;\r\n    },\r\n    openPostEditModal(state, action) {\r\n      state.postModalData = {\r\n        postData: action.payload.postData,\r\n        postId: action.payload.id,\r\n        ModalAction: action.payload.action,\r\n        isModalOpen: true,\r\n        ModalHeading:\r\n          action.payload.action === \"Update\"\r\n            ? \"Update the Post\"\r\n            : \"Delete the post\",\r\n        variant: action.payload.action === \"Update\" ? \"primary\" : \"danger\",\r\n      };\r\n      console.log(state.postModalData);\r\n    },\r\n    updatingModalData(state){\r\n\r\n    }\r\n  },\r\n});\r\n\r\nexport default postSlice;\r\n\r\nexport const getPostData = (param = \"\") => {\r\n  return (dispatch) => {\r\n    let url = \"posts/get-posts\";\r\n    if (param) {\r\n      url = `posts/get-posts?${param}`;\r\n    }\r\n    API.get(url)\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(postStoreAction.getData({ post: response.data.data }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const openPostModal = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.openPostEditModal(data));\r\n  };\r\n};\r\n\r\nexport const updatePostModalData = (data) => {\r\n  return dispatch =>{\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}