{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Store\\\\Order\\\\StoreOrder.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getStoreOrderData } from \"src/store/shop-slice\";\nimport Loader from \"src/Components/UI/Loader/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar StoreOrder = function StoreOrder() {\n  _s();\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      orderData: state.shopStore.order,\n      reRunComponent: state.shopStore.reRunComponent.isDataChanged\n    };\n  };\n\n  var state = useSelector(mapStateToProps);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (state.reRunComponent) {\n      console.log(state.reRunComponent);\n      dispatch(getStoreOrderData(state.orderData.param, state.orderData.status, state.orderData.method));\n    }\n  }, [state.reRunComponent, dispatch]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!state.orderData.isDataReceived && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 43\n    }, _this), state.orderData.isDataReceived && /*#__PURE__*/_jsxDEV(CTable, {\n      header: [\"#\", \"order_id\", \"Customer\", \"Total Amount\", \"Payment Status\", \"P\", \"Height\", \"Status\", \"Action\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(StoreOrder, \"FWkvKHga9et6MC1eWo2CBPmZzW4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = StoreOrder;\nexport default StoreOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreOrder\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Store/Order/StoreOrder.js"],"names":["useSelector","useDispatch","useEffect","getStoreOrderData","Loader","StoreOrder","mapStateToProps","state","orderData","shopStore","order","reRunComponent","isDataChanged","dispatch","console","log","param","status","method","isDataReceived"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,MAAP,MAAmB,iCAAnB;;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,WAAO;AACLC,MAAAA,SAAS,EAAED,KAAK,CAACE,SAAN,CAAgBC,KADtB;AAELC,MAAAA,cAAc,EAAEJ,KAAK,CAACE,SAAN,CAAgBE,cAAhB,CAA+BC;AAF1C,KAAP;AAID,GALD;;AAMA,MAAML,KAAK,GAAGP,WAAW,CAACM,eAAD,CAAzB;AACA,MAAMO,QAAQ,GAAGZ,WAAW,EAA5B;AACAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,KAAK,CAACI,cAAV,EAA0B;AACxBG,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACI,cAAlB;AACAE,MAAAA,QAAQ,CACNV,iBAAiB,CACfI,KAAK,CAACC,SAAN,CAAgBQ,KADD,EAEfT,KAAK,CAACC,SAAN,CAAgBS,MAFD,EAGfV,KAAK,CAACC,SAAN,CAAgBU,MAHD,CADX,CAAR;AAOD;AACF,GAXQ,EAWN,CAACX,KAAK,CAACI,cAAP,EAAuBE,QAAvB,CAXM,CAAT;AAYA,sBACE;AAAA,eACG,CAACN,KAAK,CAACC,SAAN,CAAgBW,cAAjB,iBAAmC,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADtC,EAEGZ,KAAK,CAACC,SAAN,CAAgBW,cAAhB,iBACC,QAAC,MAAD;AACE,MAAA,MAAM,EAAE,CACN,GADM,EAEN,UAFM,EAGN,UAHM,EAIN,cAJM,EAKN,gBALM,EAMN,GANM,EAON,QAPM,EAQN,QARM,EASN,QATM;AADV;AAAA;AAAA;AAAA;AAAA,aAHJ;AAAA,kBADF;AAuBD,CA5CD;;GAAMd,U;UAOUL,W,EACGC,W;;;KARbI,U;AA6CN,eAAeA,UAAf","sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { getStoreOrderData } from \"src/store/shop-slice\";\r\nimport Loader from \"src/Components/UI/Loader/Loader\";\r\nconst StoreOrder = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      orderData: state.shopStore.order,\r\n      reRunComponent: state.shopStore.reRunComponent.isDataChanged,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (state.reRunComponent) {\r\n      console.log(state.reRunComponent);\r\n      dispatch(\r\n        getStoreOrderData(\r\n          state.orderData.param,\r\n          state.orderData.status,\r\n          state.orderData.method\r\n        )\r\n      );\r\n    }\r\n  }, [state.reRunComponent, dispatch]);\r\n  return (\r\n    <>\r\n      {!state.orderData.isDataReceived && <Loader />}\r\n      {state.orderData.isDataReceived && (\r\n        <CTable\r\n          header={[\r\n            \"#\",\r\n            \"order_id\",\r\n            \"Customer\",\r\n            \"Total Amount\",\r\n            \"Payment Status\",\r\n            \"P\",\r\n            \"Height\",\r\n            \"Status\",\r\n            \"Action\",\r\n          ]}\r\n        >\r\n          {/* <SPTableBody body={state.data.data} action={onActionHandler} /> */}\r\n        </CTable>\r\n      )}\r\n      \r\n    </>\r\n  );\r\n};\r\nexport default StoreOrder;\r\n"]},"metadata":{},"sourceType":"module"}