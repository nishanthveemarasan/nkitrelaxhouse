{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { sendGetAdminApi, sendPostApi } from \"src/service/appService\";\nimport { loginStoreAction } from \"./store\";\nvar initialState = {\n  isLoading: false,\n  loggedInData: {\n    userId: 0,\n    name: \"\",\n    token: null,\n    role_id: \"none\",\n    isDataReceived: false,\n    image: \"\",\n    posts: 0,\n    comments: 0,\n    likes: 0\n  },\n  message: {\n    msg: \"\",\n    color: \"\",\n    isLoggedIn: false\n  },\n  admin: false\n};\nvar loginSlice = createSlice({\n  name: \"login\",\n  initialState: initialState,\n  reducers: {\n    logout: function logout(state) {\n      state.loggedInData = {\n        userId: \"\",\n        name: \"\",\n        token: null,\n        role_id: \"none\",\n        image: \"\",\n        posts: 0,\n        comments: 0,\n        likes: 0\n      };\n      state.message = {\n        msg: \"\",\n        color: \"\",\n        isLoggedIn: false\n      };\n    },\n    updateProfileImage: function updateProfileImage(state, action) {\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        image: action.payload.url\n      });\n    },\n    sendLoginRequest: function sendLoginRequest(state) {\n      state.isLoading = true;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: \"Authenticating......\",\n        color: \"success\",\n        isLoggedIn: true\n      });\n    },\n    getLoginErrorResponse: function getLoginErrorResponse(state, action) {\n      state.isLoading = false;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: action.payload.msg,\n        color: action.payload.color,\n        isLoggedIn: true\n      });\n    },\n    getLoginSuccessResponse: function getLoginSuccessResponse(state, action) {\n      state.isLoading = false;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: action.payload.msg,\n        color: action.payload.color,\n        isLoggedIn: true\n      });\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        name: action.payload.name,\n        image: action.payload.image,\n        role_id: action.payload.role_id,\n        posts: action.payload.posts,\n        comments: action.payload.comments,\n        likes: action.payload.likes,\n        userId: action.payload.id\n      });\n    },\n    updateToken: function updateToken(state, action) {\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        token: action.payload.token\n      });\n    },\n    checkUserLoggedIn: function checkUserLoggedIn(state, action) {\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        name: action.payload.name,\n        role_id: action.payload.role_id,\n        isDataReceived: true,\n        image: action.payload.image,\n        posts: action.payload.posts,\n        comments: action.payload.comments,\n        likes: action.payload.likes,\n        userId: action.payload.userId\n      });\n      console.log(state.loggedInData);\n    }\n  }\n});\nexport default loginSlice;\nexport var LoginRequest = function LoginRequest(data, history) {\n  return function (dispatch) {\n    dispatch(loginStoreAction.sendLoginRequest());\n    sendPostApi(\"user/login\", data).then(function (response) {\n      localStorage.setItem(\"token\", response.data.data.token);\n      dispatch(loginStoreAction.getLoginSuccessResponse({\n        msg: \"Authentication Successfull:Rediracting to Admin Panel!!\",\n        color: \"success\",\n        name: response.data.data.name,\n        role_id: response.data.data.roles,\n        image: response.data.data.profile_photo_path,\n        posts: response.data.data.posts,\n        comments: response.data.data.comments,\n        likes: response.data.data.likes,\n        userId: response.data.data.id\n      }));\n      setTimeout(function () {\n        dispatch(loginStoreAction.updateToken({\n          token: response.data.data.token\n        }));\n        history.replace(\"/admin\");\n      }, 2000);\n    }).catch(function (error) {\n      dispatch(loginStoreAction.getLoginErrorResponse({\n        msg: error.response.data.error,\n        color: \"danger\"\n      }));\n    });\n  };\n};\n_c = LoginRequest;\nexport var logout = function logout() {\n  return function (dispatch) {\n    localStorage.removeItem(\"token\");\n    dispatch(loginStoreAction.logout());\n  };\n};\nexport var checkUser = function checkUser(history) {\n  return function (dispatch) {\n    sendGetAdminApi(\"users/get-a-user\").then(function (response) {\n      //console.log(\"hi\", response.data.data.id);\n      dispatch(loginStoreAction.checkUserLoggedIn({\n        name: response.data.data.name,\n        role_id: response.data.data.roles,\n        image: response.data.data.profile_photo_path,\n        posts: response.data.data.posts_count,\n        comments: response.data.data.comments_count,\n        likes: response.data.data.likes_count,\n        userId: response.data.data.id\n      }));\n    }).catch(function (error) {\n      history.push(\"/\");\n    });\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRequest\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/login-store.js"],"names":["createSlice","sendGetAdminApi","sendPostApi","loginStoreAction","initialState","isLoading","loggedInData","userId","name","token","role_id","isDataReceived","image","posts","comments","likes","message","msg","color","isLoggedIn","admin","loginSlice","reducers","logout","state","updateProfileImage","action","payload","url","sendLoginRequest","getLoginErrorResponse","getLoginSuccessResponse","id","updateToken","checkUserLoggedIn","console","log","LoginRequest","data","history","dispatch","then","response","localStorage","setItem","roles","profile_photo_path","setTimeout","replace","catch","error","removeItem","checkUser","posts_count","comments_count","likes_count","push"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendGetAdminApi, sendPostApi } from \"src/service/appService\";\r\nimport { loginStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  loggedInData: {\r\n    userId: 0,\r\n    name: \"\",\r\n    token: null,\r\n    role_id: \"none\",\r\n    isDataReceived: false,\r\n    image: \"\",\r\n    posts: 0,\r\n    comments: 0,\r\n    likes: 0,\r\n  },\r\n  message: {\r\n    msg: \"\",\r\n    color: \"\",\r\n    isLoggedIn: false,\r\n  },\r\n  admin: false,\r\n};\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    logout(state) {\r\n      state.loggedInData = {\r\n        userId: \"\",\r\n        name: \"\",\r\n        token: null,\r\n        role_id: \"none\",\r\n        image: \"\",\r\n        posts: 0,\r\n        comments: 0,\r\n        likes: 0,\r\n      };\r\n      state.message = {\r\n        msg: \"\",\r\n        color: \"\",\r\n        isLoggedIn: false,\r\n      };\r\n    },\r\n    updateProfileImage(state, action) {\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        image: action.payload.url,\r\n      };\r\n    },\r\n    sendLoginRequest(state) {\r\n      state.isLoading = true;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: \"Authenticating......\",\r\n        color: \"success\",\r\n        isLoggedIn: true,\r\n      };\r\n    },\r\n\r\n    getLoginErrorResponse(state, action) {\r\n      state.isLoading = false;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: action.payload.msg,\r\n        color: action.payload.color,\r\n        isLoggedIn: true,\r\n      };\r\n    },\r\n    getLoginSuccessResponse(state, action) {\r\n      state.isLoading = false;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: action.payload.msg,\r\n        color: action.payload.color,\r\n        isLoggedIn: true,\r\n      };\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        name: action.payload.name,\r\n        image: action.payload.image,\r\n        role_id: action.payload.role_id,\r\n        posts: action.payload.posts,\r\n        comments: action.payload.comments,\r\n        likes: action.payload.likes,\r\n        userId: action.payload.id,\r\n      };\r\n    },\r\n    updateToken(state, action) {\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        token: action.payload.token,\r\n      };\r\n    },\r\n    checkUserLoggedIn(state, action) {\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        name: action.payload.name,\r\n        role_id: action.payload.role_id,\r\n        isDataReceived: true,\r\n        image: action.payload.image,\r\n        posts: action.payload.posts,\r\n        comments: action.payload.comments,\r\n        likes: action.payload.likes,\r\n        userId: action.payload.userId,\r\n      };\r\n      console.log(state.loggedInData);\r\n    },\r\n  },\r\n});\r\nexport default loginSlice;\r\n\r\nexport const LoginRequest = (data, history) => {\r\n  return (dispatch) => {\r\n    dispatch(loginStoreAction.sendLoginRequest());\r\n\r\n    sendPostApi(\"user/login\", data)\r\n      .then((response) => {\r\n        localStorage.setItem(\"token\", response.data.data.token);\r\n        dispatch(\r\n          loginStoreAction.getLoginSuccessResponse({\r\n            msg: \"Authentication Successfull:Rediracting to Admin Panel!!\",\r\n            color: \"success\",\r\n            name: response.data.data.name,\r\n            role_id: response.data.data.roles,\r\n            image: response.data.data.profile_photo_path,\r\n            posts: response.data.data.posts,\r\n            comments: response.data.data.comments,\r\n            likes: response.data.data.likes,\r\n            userId: response.data.data.id,\r\n          })\r\n        );\r\n        setTimeout(() => {\r\n          dispatch(\r\n            loginStoreAction.updateToken({\r\n              token: response.data.data.token,\r\n            })\r\n          );\r\n          history.replace(\"/admin\");\r\n        }, 2000);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          loginStoreAction.getLoginErrorResponse({\r\n            msg: error.response.data.error,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\nexport const logout = () => {\r\n  return (dispatch) => {\r\n    localStorage.removeItem(\"token\");\r\n    dispatch(loginStoreAction.logout());\r\n  };\r\n};\r\n\r\nexport const checkUser = (history) => {\r\n  return (dispatch) => {\r\n    sendGetAdminApi(\"users/get-a-user\")\r\n      .then((response) => {\r\n        //console.log(\"hi\", response.data.data.id);\r\n        dispatch(\r\n          loginStoreAction.checkUserLoggedIn({\r\n            name: response.data.data.name,\r\n            role_id: response.data.data.roles,\r\n            image: response.data.data.profile_photo_path,\r\n            posts: response.data.data.posts_count,\r\n            comments: response.data.data.comments_count,\r\n            likes: response.data.data.likes_count,\r\n            userId: response.data.data.id,\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        history.push(\"/\");\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}