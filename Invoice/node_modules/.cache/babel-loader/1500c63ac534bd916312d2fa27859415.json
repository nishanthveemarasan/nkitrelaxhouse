{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";import API from\"src/axios/axios\";import{sendGetAdminApi}from\"src/service/appService\";import{dashboardStoreAction}from\"./store\";var initialState={isDataChanged:false,widget:[{users:\"0\"},{posts:\"0\"},{comments:\"0\"},{product:\"0\"}],topOrders:[],recentOrders:[]};var dashboardSlice=createSlice({name:\"dashboard\",initialState:initialState,reducers:{getWidgetData:function getWidgetData(state,action){state.isDataChanged=true;state.widget=[{users:action.payload.users.toString()},{posts:action.payload.posts.toString()},{comments:action.payload.comments.toString()},{product:action.payload.totalProducts.toString()}];state.topOrders=action.payload.topOrders;state.recentOrders=action.payload.recentOrders;}}});export default dashboardSlice;export var getWidgetData=function getWidgetData(){return function(dispatch){sendGetAdminApi(\"get-dashboard-data\").then(function(response){if(response.data.http_status===200){dispatch(dashboardStoreAction.getWidgetData(response.data.data));}console.log(response.data.data);}).catch(function(error){return console.log(error);});};};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/dashboard-slice.js"],"names":["createSlice","API","sendGetAdminApi","dashboardStoreAction","initialState","isDataChanged","widget","users","posts","comments","product","topOrders","recentOrders","dashboardSlice","name","reducers","getWidgetData","state","action","payload","toString","totalProducts","dispatch","then","response","data","http_status","console","log","catch","error"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,GAAP,KAAgB,iBAAhB,CACA,OAASC,eAAT,KAAgC,wBAAhC,CACA,OAASC,oBAAT,KAAqC,SAArC,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,aAAa,CAAE,KADI,CAEnBC,MAAM,CAAE,CAAC,CAAEC,KAAK,CAAE,GAAT,CAAD,CAAiB,CAAEC,KAAK,CAAE,GAAT,CAAjB,CAAiC,CAAEC,QAAQ,CAAE,GAAZ,CAAjC,CAAoD,CAAEC,OAAO,CAAE,GAAX,CAApD,CAFW,CAGnBC,SAAS,CAAE,EAHQ,CAInBC,YAAY,CAAE,EAJK,CAArB,CAOA,GAAMC,CAAAA,cAAc,CAAGb,WAAW,CAAC,CACjCc,IAAI,CAAE,WAD2B,CAEjCV,YAAY,CAAZA,YAFiC,CAGjCW,QAAQ,CAAE,CACRC,aADQ,wBACMC,KADN,CACaC,MADb,CACqB,CAC3BD,KAAK,CAACZ,aAAN,CAAsB,IAAtB,CACAY,KAAK,CAACX,MAAN,CAAe,CACb,CAAEC,KAAK,CAAEW,MAAM,CAACC,OAAP,CAAeZ,KAAf,CAAqBa,QAArB,EAAT,CADa,CAEb,CAAEZ,KAAK,CAAEU,MAAM,CAACC,OAAP,CAAeX,KAAf,CAAqBY,QAArB,EAAT,CAFa,CAGb,CAAEX,QAAQ,CAAES,MAAM,CAACC,OAAP,CAAeV,QAAf,CAAwBW,QAAxB,EAAZ,CAHa,CAIb,CAAEV,OAAO,CAAEQ,MAAM,CAACC,OAAP,CAAeE,aAAf,CAA6BD,QAA7B,EAAX,CAJa,CAAf,CAMAH,KAAK,CAACN,SAAN,CAAkBO,MAAM,CAACC,OAAP,CAAeR,SAAjC,CACAM,KAAK,CAACL,YAAN,CAAqBM,MAAM,CAACC,OAAP,CAAeP,YAApC,CACD,CAXO,CAHuB,CAAD,CAAlC,CAkBA,cAAeC,CAAAA,cAAf,CAEA,MAAO,IAAMG,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACjC,MAAO,UAACM,QAAD,CAAc,CACnBpB,eAAe,CAAC,oBAAD,CAAf,CACGqB,IADH,CACQ,SAACC,QAAD,CAAc,CAClB,GAAIA,QAAQ,CAACC,IAAT,CAAcC,WAAd,GAA8B,GAAlC,CAAuC,CACrCJ,QAAQ,CAACnB,oBAAoB,CAACa,aAArB,CAAmCQ,QAAQ,CAACC,IAAT,CAAcA,IAAjD,CAAD,CAAR,CACD,CACDE,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACC,IAAT,CAAcA,IAA1B,EACD,CANH,EAOGI,KAPH,CAOS,SAACC,KAAD,QAAWH,CAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ,CAAX,EAPT,EAQD,CATD,CAUD,CAXM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\nimport { sendGetAdminApi } from \"src/service/appService\";\r\nimport { dashboardStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isDataChanged: false,\r\n  widget: [{ users: \"0\" }, { posts: \"0\" }, { comments: \"0\" }, { product: \"0\" }],\r\n  topOrders: [],\r\n  recentOrders: [],\r\n};\r\n\r\nconst dashboardSlice = createSlice({\r\n  name: \"dashboard\",\r\n  initialState,\r\n  reducers: {\r\n    getWidgetData(state, action) {\r\n      state.isDataChanged = true;\r\n      state.widget = [\r\n        { users: action.payload.users.toString() },\r\n        { posts: action.payload.posts.toString() },\r\n        { comments: action.payload.comments.toString() },\r\n        { product: action.payload.totalProducts.toString() },\r\n      ];\r\n      state.topOrders = action.payload.topOrders;\r\n      state.recentOrders = action.payload.recentOrders;\r\n    },\r\n  },\r\n});\r\n\r\nexport default dashboardSlice;\r\n\r\nexport const getWidgetData = () => {\r\n  return (dispatch) => {\r\n    sendGetAdminApi(\"get-dashboard-data\")\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(dashboardStoreAction.getWidgetData(response.data.data));\r\n        }\r\n        console.log(response.data.data);\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}