{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { sendGetAdminApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { commentStoreAction } from \"./store\";\nvar initialState = {\n  tableData: {\n    data: [],\n    isDataLoaded: false\n  },\n  reRunComponent: {\n    isDataChanged: true,\n    queryParam: \"\"\n  }\n};\nvar commentSlice = createSlice({\n  name: \"comments\",\n  initialState: initialState,\n  reducers: {\n    getAllCommentData: function getAllCommentData(state, action) {\n      state.tableData = {\n        data: action.payload.data,\n        isDataLoaded: false\n      };\n    }\n  }\n});\nexport default commentSlice;\nexport var getCommentData = function getCommentData(data) {\n  return function (dispatch) {\n    var url = getUrl(\"comments/get-comments\", data.param);\n    console.log(url);\n    sendGetAdminApi(url).then(function (response) {\n      console.log(response.data.data);\n      dispatch(commentStoreAction.getAllCommentData({\n        data: response.data.data\n      })); // if (response.data.http_status === 200) {\n      //   dispatch(postStoreAction.getData({ post: response.data.data }));\n      // }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/comment-slice.js"],"names":["createSlice","sendGetAdminApi","getUrl","commentStoreAction","initialState","tableData","data","isDataLoaded","reRunComponent","isDataChanged","queryParam","commentSlice","name","reducers","getAllCommentData","state","action","payload","getCommentData","dispatch","url","param","console","log","then","response","catch","error","message"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,kBAAT,QAAmC,SAAnC;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,EADG;AAETC,IAAAA,YAAY,EAAE;AAFL,GADQ;AAKnBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,aAAa,EAAE,IADD;AAEdC,IAAAA,UAAU,EAAE;AAFE;AALG,CAArB;AAWA,IAAMC,YAAY,GAAGX,WAAW,CAAC;AAC/BY,EAAAA,IAAI,EAAE,UADyB;AAE/BR,EAAAA,YAAY,EAAZA,YAF+B;AAG/BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBADQ,6BACUC,KADV,EACiBC,MADjB,EACyB;AAC/BD,MAAAA,KAAK,CAACV,SAAN,GAAkB;AAChBC,QAAAA,IAAI,EAAEU,MAAM,CAACC,OAAP,CAAeX,IADL;AAEhBC,QAAAA,YAAY,EAAE;AAFE,OAAlB;AAID;AANO;AAHqB,CAAD,CAAhC;AAYA,eAAeI,YAAf;AAEA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACZ,IAAD,EAAU;AACtC,SAAO,UAACa,QAAD,EAAc;AACnB,QAAMC,GAAG,GAAGlB,MAAM,0BAA0BI,IAAI,CAACe,KAA/B,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAnB,IAAAA,eAAe,CAACmB,GAAD,CAAf,CACGI,IADH,CACQ,UAACC,QAAD,EAAc;AAClBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACnB,IAAT,CAAcA,IAA1B;AACAa,MAAAA,QAAQ,CACNhB,kBAAkB,CAACW,iBAAnB,CAAqC;AACnCR,QAAAA,IAAI,EAAEmB,QAAQ,CAACnB,IAAT,CAAcA;AADe,OAArC,CADM,CAAR,CAFkB,CAOlB;AACA;AACA;AACD,KAXH,EAYGoB,KAZH,CAYS,UAACC,KAAD,EAAW;AAChBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAK,CAACC,OAAlB;AACD,KAdH;AAeD,GAlBD;AAmBD,CApBM","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendGetAdminApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { commentStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  tableData: {\r\n    data: [],\r\n    isDataLoaded: false,\r\n  },\r\n  reRunComponent: {\r\n    isDataChanged: true,\r\n    queryParam: \"\",\r\n  },\r\n};\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    getAllCommentData(state, action) {\r\n      state.tableData = {\r\n        data: action.payload.data,\r\n        isDataLoaded: false,\r\n      };\r\n    },\r\n  },\r\n});\r\nexport default commentSlice;\r\n\r\nexport const getCommentData = (data) => {\r\n  return (dispatch) => {\r\n    const url = getUrl(`comments/get-comments`, data.param);\r\n    console.log(url);\r\n    sendGetAdminApi(url)\r\n      .then((response) => {\r\n        console.log(response.data.data);\r\n        dispatch(\r\n          commentStoreAction.getAllCommentData({\r\n            data: response.data.data,\r\n          })\r\n        );\r\n        // if (response.data.http_status === 200) {\r\n        //   dispatch(postStoreAction.getData({ post: response.data.data }));\r\n        // }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}