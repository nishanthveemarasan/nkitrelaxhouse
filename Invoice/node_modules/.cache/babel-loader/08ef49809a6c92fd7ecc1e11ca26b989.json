{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Users\\\\Modal\\\\UserEditModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport CAlert from \"src/Components/UI/Alert/CAlert\";\nimport FormSelect from \"src/Components/UI/Input/FormSelect\";\nimport CModal from \"src/Components/UI/Modal/CModal\";\nimport useFormValidate from \"src/Hooks/input-validation\";\nimport { closeUserModal, disableUser, editUserRole } from \"src/store/user-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar UserEditModal = function UserEditModal() {\n  _s();\n\n  var _useFormValidate = useFormValidate(),\n      role = _useFormValidate.inputValue,\n      onRoleChange = _useFormValidate.inputChangeHandler,\n      setRole = _useFormValidate.setInputValue;\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      userModalData: state.userStore.userModalData,\n      updateUserData: state.userStore.updateUserData\n    };\n  };\n\n  var state = useSelector(mapStateToProps);\n  useEffect(function () {\n    if (state.userModalData.actionType === \"assign\") {\n      setRole(state.userModalData.userRole);\n    }\n  }, [state.userModalData, setRole]);\n  var dispatch = useDispatch();\n\n  var onSubmitHandler = function onSubmitHandler(e) {\n    e.preventDefault();\n\n    if (state.userModalData.actionType === \"assign\") {\n      var data = {\n        id: state.userModalData.userId,\n        role: role\n      };\n      dispatch(editUserRole(data));\n    } else {\n      var _data = {\n        id: state.userModalData.userId,\n        currentStatus: state.userModalData.userStatus\n      };\n      dispatch(disableUser(_data));\n    }\n  };\n\n  var modalCloseHandler = function modalCloseHandler() {\n    dispatch(closeUserModal());\n  };\n\n  return /*#__PURE__*/_jsxDEV(CModal, {\n    onShow: state.userModalData.isModalOpen,\n    heading: state.userModalData.modalHeading,\n    variant: state.userModalData.variant,\n    action: state.userModalData.modalAction,\n    size: \"md\",\n    onSubmitHandler: onSubmitHandler,\n    loading: state.updateUserData.isLoading,\n    onClose: modalCloseHandler,\n    showButton: state.updateUserData.isDataUpdated && state.userModalData.modalAction !== '',\n    children: [state.updateUserData.isDataUpdated && /*#__PURE__*/_jsxDEV(CAlert, {\n      color: state.updateUserData.color,\n      text: state.updateUserData.msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, _this), state.userModalData.actionType === \"delete\" && !state.updateUserData.isDataUpdated && /*#__PURE__*/_jsxDEV(CAlert, {\n      color: \"danger\",\n      text: \"please confirm that you are going to this \".concat(state.userModalData.userStatus === \"1\" ? \"DISABLE\" : \"ENABLE\", \" User\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, _this), state.userModalData.actionType === \"assign\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FormSelect, {\n        label: \"User Roles\",\n        value: role,\n        change: onRoleChange,\n        options: [\"Admin\", \"User\"],\n        readOnly: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(UserEditModal, \"NX0fxTTotouxHteVBuVnKhiQFbY=\", false, function () {\n  return [useFormValidate, useSelector, useDispatch];\n});\n\n_c = UserEditModal;\nexport default UserEditModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserEditModal\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Users/Modal/UserEditModal.js"],"names":["useEffect","useSelector","useDispatch","CAlert","FormSelect","CModal","useFormValidate","closeUserModal","disableUser","editUserRole","UserEditModal","role","inputValue","onRoleChange","inputChangeHandler","setRole","setInputValue","mapStateToProps","state","userModalData","userStore","updateUserData","actionType","userRole","dispatch","onSubmitHandler","e","preventDefault","data","id","userId","currentStatus","userStatus","modalCloseHandler","isModalOpen","modalHeading","variant","modalAction","isLoading","isDataUpdated","color","msg"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,SACEC,cADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,sBAJP;;;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA;;AAC1B,yBAIIJ,eAAe,EAJnB;AAAA,MACcK,IADd,oBACEC,UADF;AAAA,MAEsBC,YAFtB,oBAEEC,kBAFF;AAAA,MAGiBC,OAHjB,oBAGEC,aAHF;;AAKA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,WAAO;AACLC,MAAAA,aAAa,EAAED,KAAK,CAACE,SAAN,CAAgBD,aAD1B;AAELE,MAAAA,cAAc,EAAEH,KAAK,CAACE,SAAN,CAAgBC;AAF3B,KAAP;AAID,GALD;;AAMA,MAAMH,KAAK,GAAGjB,WAAW,CAACgB,eAAD,CAAzB;AACAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkB,KAAK,CAACC,aAAN,CAAoBG,UAApB,KAAmC,QAAvC,EAAiD;AAC/CP,MAAAA,OAAO,CAACG,KAAK,CAACC,aAAN,CAAoBI,QAArB,CAAP;AACD;AACF,GAJQ,EAIN,CAACL,KAAK,CAACC,aAAP,EAAsBJ,OAAtB,CAJM,CAAT;AAKA,MAAMS,QAAQ,GAAGtB,WAAW,EAA5B;;AACA,MAAMuB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,CAAD,EAAO;AAC7BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIT,KAAK,CAACC,aAAN,CAAoBG,UAApB,KAAmC,QAAvC,EAAiD;AAC/C,UAAMM,IAAI,GAAG;AACXC,QAAAA,EAAE,EAAEX,KAAK,CAACC,aAAN,CAAoBW,MADb;AAEXnB,QAAAA,IAAI,EAAEA;AAFK,OAAb;AAIAa,MAAAA,QAAQ,CAACf,YAAY,CAACmB,IAAD,CAAb,CAAR;AACD,KAND,MAMO;AACL,UAAMA,KAAI,GAAG;AACXC,QAAAA,EAAE,EAAEX,KAAK,CAACC,aAAN,CAAoBW,MADb;AAEXC,QAAAA,aAAa,EAAEb,KAAK,CAACC,aAAN,CAAoBa;AAFxB,OAAb;AAIAR,MAAAA,QAAQ,CAAChB,WAAW,CAACoB,KAAD,CAAZ,CAAR;AACD;AACF,GAfD;;AAiBA,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BT,IAAAA,QAAQ,CAACjB,cAAc,EAAf,CAAR;AACD,GAFD;;AAGA,sBACE,QAAC,MAAD;AACE,IAAA,MAAM,EAAEW,KAAK,CAACC,aAAN,CAAoBe,WAD9B;AAEE,IAAA,OAAO,EAAEhB,KAAK,CAACC,aAAN,CAAoBgB,YAF/B;AAGE,IAAA,OAAO,EAAEjB,KAAK,CAACC,aAAN,CAAoBiB,OAH/B;AAIE,IAAA,MAAM,EAAElB,KAAK,CAACC,aAAN,CAAoBkB,WAJ9B;AAKE,IAAA,IAAI,EAAC,IALP;AAME,IAAA,eAAe,EAAEZ,eANnB;AAOE,IAAA,OAAO,EAAEP,KAAK,CAACG,cAAN,CAAqBiB,SAPhC;AAQE,IAAA,OAAO,EAAEL,iBARX;AASE,IAAA,UAAU,EAAEf,KAAK,CAACG,cAAN,CAAqBkB,aAArB,IAAsCrB,KAAK,CAACC,aAAN,CAAoBkB,WAApB,KAAoC,EATxF;AAAA,eAWGnB,KAAK,CAACG,cAAN,CAAqBkB,aAArB,iBACC,QAAC,MAAD;AACE,MAAA,KAAK,EAAErB,KAAK,CAACG,cAAN,CAAqBmB,KAD9B;AAEE,MAAA,IAAI,EAAEtB,KAAK,CAACG,cAAN,CAAqBoB;AAF7B;AAAA;AAAA;AAAA;AAAA,aAZJ,EAiBGvB,KAAK,CAACC,aAAN,CAAoBG,UAApB,KAAmC,QAAnC,IACC,CAACJ,KAAK,CAACG,cAAN,CAAqBkB,aADvB,iBAEG,QAAC,MAAD;AACE,MAAA,KAAK,EAAC,QADR;AAEE,MAAA,IAAI,sDACFrB,KAAK,CAACC,aAAN,CAAoBa,UAApB,KAAmC,GAAnC,GAAyC,SAAzC,GAAqD,QADnD;AAFN;AAAA;AAAA;AAAA;AAAA,aAnBN,EA0BGd,KAAK,CAACC,aAAN,CAAoBG,UAApB,KAAmC,QAAnC,iBACC;AAAA,6BACE,QAAC,UAAD;AACE,QAAA,KAAK,EAAC,YADR;AAEE,QAAA,KAAK,EAAEX,IAFT;AAGE,QAAA,MAAM,EAAEE,YAHV;AAIE,QAAA,OAAO,EAAE,CAAC,OAAD,EAAU,MAAV,CAJX;AAKE,QAAA,QAAQ,EAAE;AALZ;AAAA;AAAA;AAAA;AAAA;AADF,qBA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAwCD,CA/ED;;GAAMH,a;UAKAJ,e,EAOUL,W,EAMGC,W;;;KAlBbQ,a;AAgFN,eAAeA,aAAf","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CAlert from \"src/Components/UI/Alert/CAlert\";\r\nimport FormSelect from \"src/Components/UI/Input/FormSelect\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport {\r\n  closeUserModal,\r\n  disableUser,\r\n  editUserRole,\r\n} from \"src/store/user-slice\";\r\nconst UserEditModal = () => {\r\n  const {\r\n    inputValue: role,\r\n    inputChangeHandler: onRoleChange,\r\n    setInputValue: setRole,\r\n  } = useFormValidate();\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      userModalData: state.userStore.userModalData,\r\n      updateUserData: state.userStore.updateUserData,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  useEffect(() => {\r\n    if (state.userModalData.actionType === \"assign\") {\r\n      setRole(state.userModalData.userRole);\r\n    }\r\n  }, [state.userModalData, setRole]);\r\n  const dispatch = useDispatch();\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (state.userModalData.actionType === \"assign\") {\r\n      const data = {\r\n        id: state.userModalData.userId,\r\n        role: role,\r\n      };\r\n      dispatch(editUserRole(data));\r\n    } else {\r\n      const data = {\r\n        id: state.userModalData.userId,\r\n        currentStatus: state.userModalData.userStatus,\r\n      };\r\n      dispatch(disableUser(data));\r\n    }\r\n  };\r\n\r\n  const modalCloseHandler = () => {\r\n    dispatch(closeUserModal());\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.userModalData.isModalOpen}\r\n      heading={state.userModalData.modalHeading}\r\n      variant={state.userModalData.variant}\r\n      action={state.userModalData.modalAction}\r\n      size=\"md\"\r\n      onSubmitHandler={onSubmitHandler}\r\n      loading={state.updateUserData.isLoading}\r\n      onClose={modalCloseHandler}\r\n      showButton={state.updateUserData.isDataUpdated && state.userModalData.modalAction !== ''}\r\n    >\r\n      {state.updateUserData.isDataUpdated && (\r\n        <CAlert\r\n          color={state.updateUserData.color}\r\n          text={state.updateUserData.msg}\r\n        />\r\n      )}\r\n      {state.userModalData.actionType === \"delete\" &&\r\n        !state.updateUserData.isDataUpdated && (\r\n          <CAlert\r\n            color=\"danger\"\r\n            text={`please confirm that you are going to this ${\r\n              state.userModalData.userStatus === \"1\" ? \"DISABLE\" : \"ENABLE\"\r\n            } User`}\r\n          />\r\n        )}\r\n      {state.userModalData.actionType === \"assign\" && (\r\n        <>\r\n          <FormSelect\r\n            label=\"User Roles\"\r\n            value={role}\r\n            change={onRoleChange}\r\n            options={[\"Admin\", \"User\"]}\r\n            readOnly={false}\r\n          />\r\n        </>\r\n      )}\r\n    </CModal>\r\n  );\r\n};\r\nexport default UserEditModal;\r\n"]},"metadata":{},"sourceType":"module"}