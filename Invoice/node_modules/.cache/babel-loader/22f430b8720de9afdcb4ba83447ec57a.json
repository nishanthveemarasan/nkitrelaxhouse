{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { sendGetAdminApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { commentStoreAction } from \"./store\";\nvar initialState = {\n  tableData: {\n    data: [],\n    isDataLoaded: false\n  },\n  reRunComponent: {\n    isDataChanged: true,\n    queryParam: \"\"\n  },\n  filterComment: {\n    userId: \"all\"\n  },\n  jobModal: {\n    id: 0,\n    details: \"\",\n    isModalOpen: false,\n    isLoading: false,\n    isDataUpdated: false,\n    msg: \"\",\n    color: \"\"\n  }\n};\nvar commentSlice = createSlice({\n  name: \"comments\",\n  initialState: initialState,\n  reducers: {\n    getAllCommentData: function getAllCommentData(state, action) {\n      state.tableData = {\n        data: action.payload.data,\n        isDataLoaded: true\n      };\n    },\n    sendInitialRequest: function sendInitialRequest(state) {\n      state.tableData = _objectSpread(_objectSpread({}, state.tableData), {}, {\n        isDataLoaded: false\n      });\n    },\n    updateParam: function updateParam(state, action) {\n      state.reRunComponent = _objectSpread(_objectSpread({}, state.reRunComponent), {}, {\n        queryParam: action.payload.param\n      });\n    },\n    updateFilterComment: function updateFilterComment(state, action) {\n      state.filterComment = {\n        userId: action.payload.userId\n      };\n    }\n  }\n});\nexport default commentSlice;\nexport var getCommentData = function getCommentData(data) {\n  return function (dispatch) {\n    dispatch(commentStoreAction.sendInitialRequest());\n    var url = getUrl(\"comments/get-comments/\".concat(data.id), data.param);\n    sendGetAdminApi(url).then(function (response) {\n      dispatch(commentStoreAction.getAllCommentData({\n        data: response.data.data\n      }));\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var getPostCommentData = function getPostCommentData(id) {\n  return function (dispatch) {\n    sendGetAdminApi(\"comments/get-post-comment/\".concat(id)).then(function (response) {\n      var data = {\n        data: response.data.data,\n        type: \"success\"\n      };\n      console.log(data);\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/comment-slice.js"],"names":["createSlice","sendGetAdminApi","getUrl","commentStoreAction","initialState","tableData","data","isDataLoaded","reRunComponent","isDataChanged","queryParam","filterComment","userId","jobModal","id","details","isModalOpen","isLoading","isDataUpdated","msg","color","commentSlice","name","reducers","getAllCommentData","state","action","payload","sendInitialRequest","updateParam","param","updateFilterComment","getCommentData","dispatch","url","then","response","catch","error","console","log","message","getPostCommentData","type"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendGetAdminApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { commentStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  tableData: {\r\n    data: [],\r\n    isDataLoaded: false,\r\n  },\r\n  reRunComponent: {\r\n    isDataChanged: true,\r\n    queryParam: \"\",\r\n  },\r\n  filterComment: {\r\n    userId: \"all\",\r\n  },\r\n  jobModal: {\r\n    id: 0,\r\n    details: \"\",\r\n    isModalOpen: false,\r\n    isLoading: false,\r\n    isDataUpdated: false,\r\n    msg: \"\",\r\n    color: \"\",\r\n  },\r\n};\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    getAllCommentData(state, action) {\r\n      state.tableData = {\r\n        data: action.payload.data,\r\n        isDataLoaded: true,\r\n      };\r\n    },\r\n    sendInitialRequest(state) {\r\n      state.tableData = {\r\n        ...state.tableData,\r\n        isDataLoaded: false,\r\n      };\r\n    },\r\n    updateParam(state, action) {\r\n      state.reRunComponent = {\r\n        ...state.reRunComponent,\r\n        queryParam: action.payload.param,\r\n      };\r\n    },\r\n    updateFilterComment(state, action) {\r\n      state.filterComment = {\r\n        userId: action.payload.userId,\r\n      };\r\n    },\r\n  },\r\n});\r\nexport default commentSlice;\r\n\r\nexport const getCommentData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(commentStoreAction.sendInitialRequest());\r\n    const url = getUrl(`comments/get-comments/${data.id}`, data.param);\r\n    sendGetAdminApi(url)\r\n      .then((response) => {\r\n        dispatch(\r\n          commentStoreAction.getAllCommentData({\r\n            data: response.data.data,\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\nexport const getPostCommentData = (id) => {\r\n  return (dispatch) => {\r\n    sendGetAdminApi(`comments/get-post-comment/${id}`)\r\n      .then((response) => {\r\n        const data = {\r\n          data: response.data.data,\r\n          type: \"success\",\r\n        };\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}