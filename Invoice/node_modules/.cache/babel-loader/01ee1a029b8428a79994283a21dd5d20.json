{"ast":null,"code":"'use strict';\n\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar anObject = require('../internals/an-object');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar advanceStringIndex = require('../internals/advance-string-index');\n\nvar toLength = require('../internals/to-length');\n\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\n\nvar regexpExec = require('../internals/regexp-exec');\n\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\n\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF; // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n\n  re.exec = function () {\n    return originalExec.apply(this, arguments);\n  };\n\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n}); // @@split logic\n\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n\n  if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing\n  '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function internalSplit(separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string]; // If `separator` is not a regex, use native split\n\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy\n\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n\n      return output.length > lim ? output.slice(0, lim) : output;\n    }; // Chakra, V8\n\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function internalSplit(separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [// `String.prototype.split` method\n  // https://tc39.es/ecma262/#sec-string.prototype.split\n  function split(separator, limit) {\n    var O = requireObjectCoercible(this);\n    var splitter = separator == undefined ? undefined : separator[SPLIT];\n    return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);\n  }, // `RegExp.prototype[@@split]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n  //\n  // NOTE: This cannot be properly polyfilled in engines that don't support\n  // the 'y' flag.\n  function (string, limit) {\n    var res = maybeCallNative(internalSplit, this, string, limit, internalSplit !== nativeSplit);\n    if (res.done) return res.value;\n    var rx = anObject(this);\n    var S = String(string);\n    var C = speciesConstructor(rx, RegExp);\n    var unicodeMatching = rx.unicode;\n    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y'); // ^(? + rx + ) is needed, in combination with some S slicing, to\n    // simulate the 'y' flag.\n\n    var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n    if (lim === 0) return [];\n    if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n    var p = 0;\n    var q = 0;\n    var A = [];\n\n    while (q < S.length) {\n      splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n      var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);\n      var e;\n\n      if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {\n        q = advanceStringIndex(S, q, unicodeMatching);\n      } else {\n        A.push(S.slice(p, q));\n        if (A.length === lim) return A;\n\n        for (var i = 1; i <= z.length - 1; i++) {\n          A.push(z[i]);\n          if (A.length === lim) return A;\n        }\n\n        q = p = e;\n      }\n    }\n\n    A.push(S.slice(p));\n    return A;\n  }];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/node_modules/core-js/modules/es.string.split.js"],"names":["fixRegExpWellKnownSymbolLogic","require","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","stickyHelpers","fails","UNSUPPORTED_Y","arrayPush","push","min","Math","MAX_UINT32","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","re","originalExec","exec","apply","arguments","result","split","length","SPLIT","nativeSplit","maybeCallNative","internalSplit","separator","limit","string","String","lim","undefined","call","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","RegExp","source","match","lastIndex","lastLength","slice","index","test","O","splitter","res","done","value","rx","S","C","unicodeMatching","p","q","A","z","e","i"],"mappings":"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","sourcesContent":["'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var res = maybeCallNative(internalSplit, this, string, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(this);\n      var S = String(string);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n"]},"metadata":{},"sourceType":"script"}