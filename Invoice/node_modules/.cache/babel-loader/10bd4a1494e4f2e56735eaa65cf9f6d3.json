{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport API from \"src/axios/axios\";\nimport { userStoreAction } from \"./store\";\nvar initialState = {\n  isUserDataLoaded: false,\n  userData: [],\n  reRunComponent: true,\n  userModalData: {\n    userRoles: [\"Admin\", \"User\"],\n    userId: 0,\n    actionType: \"\",\n    isModalOpen: false,\n    modalHeading: \"\",\n    modalAction: \"\",\n    variant: \"\",\n    userRole: userRole\n  },\n  updateUserData: {\n    isLoading: false,\n    isDataUpdated: false,\n    msg: \"\",\n    color: \"\"\n  }\n};\nvar userSlice = createSlice({\n  name: \"users\",\n  initialState: initialState,\n  reducers: {\n    getData: function getData(state, action) {\n      state.isUserDataLoaded = true;\n      state.userData = action.payload.user;\n    },\n    openUserModal: function openUserModal(state, action) {\n      state.userModalData = _objectSpread(_objectSpread({}, state.userModalData), {}, {\n        isModalOpen: true,\n        userId: action.payload.id,\n        userRole: action.payload.userRole,\n        actionType: action.payload.actionType,\n        modalHeading: action.payload.heading,\n        variant: action.payload.variant,\n        modalAction: action.payload.modalAction\n      });\n      console.log(state.userModalData);\n    },\n    updatingData: function updatingData(state) {\n      state.updateUserData = _objectSpread(_objectSpread({}, state.updateUserData), {}, {\n        isLoading: true,\n        isDataUpdated: false\n      });\n    },\n    dataUpdated: function dataUpdated(state, action) {\n      state.updateUserData = {\n        isLoading: false,\n        isDataUpdated: true,\n        msg: action.payload.msg,\n        color: action.payload.color\n      };\n      console.log(state.updateUserData);\n    }\n  }\n});\nexport default userSlice;\nexport var getUserData = function getUserData(param) {\n  return function (dispatch) {\n    var url = \"users/get-users\";\n\n    if (param) {\n      url = \"users/get-users?\".concat(param);\n    }\n\n    API.get(url).then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(userStoreAction.getData({\n          user: response.data.data\n        }));\n      }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var getUserModalData = function getUserModalData(data) {\n  return function (dispatch) {\n    dispatch(userStoreAction.openUserModal({\n      id: data.id,\n      actionType: data.action,\n      userRole: data.userRole,\n      userStatus: data.userStatus,\n      modalAction: data.action === \"assign\" ? \"Assign Role\" : \"Disable\",\n      heading: data.action === \"assign\" ? \"Assign Role to the User\" : \"Enable/Disable the User\",\n      variant: data.action === \"assign\" ? \"primary\" : \"danger\"\n    }));\n  };\n};\nexport var editUserRole = function editUserRole(data) {\n  return function (dispatch) {\n    dispatch(userStoreAction.updatingData());\n    var result = {\n      msg: \"User Role has been Updated\"\n    };\n    dispatch(userStoreAction.dataUpdated({\n      msg: result.msg,\n      color: \"success\"\n    }));\n  };\n};\nexport var disableUser = function disableUser(data) {\n  return function (dispatch) {\n    dispatch(userStoreAction.updatingData());\n    var result = {\n      msg: \"User has been Disabled Successfully\"\n    };\n    dispatch(userStoreAction.dataUpdated({\n      msg: result.msg,\n      color: \"success\"\n    }));\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/user-slice.js"],"names":["createSlice","API","userStoreAction","initialState","isUserDataLoaded","userData","reRunComponent","userModalData","userRoles","userId","actionType","isModalOpen","modalHeading","modalAction","variant","userRole","updateUserData","isLoading","isDataUpdated","msg","color","userSlice","name","reducers","getData","state","action","payload","user","openUserModal","id","heading","console","log","updatingData","dataUpdated","getUserData","param","dispatch","url","get","then","response","data","http_status","catch","error","message","getUserModalData","userStatus","editUserRole","result","disableUser"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\nimport { userStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isUserDataLoaded: false,\r\n  userData: [],\r\n  reRunComponent: true,\r\n  userModalData: {\r\n    userRoles: [\"Admin\", \"User\"],\r\n    userId: 0,\r\n    actionType: \"\",\r\n    isModalOpen: false,\r\n    modalHeading: \"\",\r\n    modalAction: \"\",\r\n    variant: \"\",\r\n    userRole\r\n  },\r\n  updateUserData: {\r\n    isLoading: false,\r\n    isDataUpdated: false,\r\n    msg: \"\",\r\n    color: \"\",\r\n  },\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"users\",\r\n  initialState,\r\n  reducers: {\r\n    getData(state, action) {\r\n      state.isUserDataLoaded = true;\r\n      state.userData = action.payload.user;\r\n    },\r\n    openUserModal(state, action) {\r\n      state.userModalData = {\r\n        ...state.userModalData,\r\n        isModalOpen: true,\r\n        userId: action.payload.id,\r\n        userRole:action.payload.userRole,\r\n        actionType: action.payload.actionType,\r\n        modalHeading: action.payload.heading,\r\n        variant: action.payload.variant,\r\n        modalAction: action.payload.modalAction,\r\n      };\r\n      console.log(state.userModalData);\r\n    },\r\n    updatingData(state) {\r\n      state.updateUserData = {\r\n        ...state.updateUserData,\r\n        isLoading: true,\r\n        isDataUpdated: false,\r\n      };\r\n    },\r\n    dataUpdated(state, action) {\r\n      state.updateUserData = {\r\n        isLoading: false,\r\n        isDataUpdated: true,\r\n        msg: action.payload.msg,\r\n        color: action.payload.color,\r\n      };\r\n      console.log(state.updateUserData);\r\n    },\r\n  },\r\n});\r\nexport default userSlice;\r\n\r\nexport const getUserData = (param) => {\r\n  return (dispatch) => {\r\n    let url = \"users/get-users\";\r\n    if (param) {\r\n      url = `users/get-users?${param}`;\r\n    }\r\n    API.get(url)\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(userStoreAction.getData({ user: response.data.data }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const getUserModalData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(\r\n      userStoreAction.openUserModal({\r\n        id: data.id,\r\n        actionType: data.action,\r\n        userRole: data.userRole,\r\n        userStatus: data.userStatus,\r\n        modalAction: data.action === \"assign\" ? \"Assign Role\" : \"Disable\",\r\n        heading:\r\n          data.action === \"assign\"\r\n            ? \"Assign Role to the User\"\r\n            : \"Enable/Disable the User\",\r\n        variant: data.action === \"assign\" ? \"primary\" : \"danger\",\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const editUserRole = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(userStoreAction.updatingData());\r\n    const result = {\r\n      msg: \"User Role has been Updated\",\r\n    };\r\n    dispatch(\r\n      userStoreAction.dataUpdated({\r\n        msg: result.msg,\r\n        color: \"success\",\r\n      })\r\n    );\r\n  };\r\n};\r\n\r\nexport const disableUser = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(userStoreAction.updatingData());\r\n    const result = {\r\n      msg: \"User has been Disabled Successfully\",\r\n    };\r\n    dispatch(\r\n      userStoreAction.dataUpdated({\r\n        msg: result.msg,\r\n        color: \"success\",\r\n      })\r\n    );\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}