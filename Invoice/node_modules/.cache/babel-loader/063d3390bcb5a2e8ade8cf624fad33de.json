{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { sendGetAdminApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { commentStoreAction } from \"./store\";\nvar initialState = {\n  tableData: {\n    data: [],\n    isDataLoaded: false\n  },\n  reRunComponent: {\n    isDataChanged: true,\n    queryParam: \"\"\n  },\n  filterComment: {\n    userId: \"all\"\n  },\n  commentModal: {\n    id: 0,\n    isModalOpen: false,\n    modalHeading: \"\",\n    modalAction: \"\",\n    isLoading: false,\n    isDataUpdated: false,\n    modalBody: \"\",\n    msg: \"\",\n    color: \"\"\n  }\n};\nvar commentSlice = createSlice({\n  name: \"comments\",\n  initialState: initialState,\n  reducers: {\n    openCommentModal: function openCommentModal(state, action) {\n      state.commentModal = _objectSpread(_objectSpread({}, state.commentModal), {}, {\n        id: action.payload.id,\n        isModalOpen: true,\n        modalHeading: action.payload.heading,\n        modalAction: action.payload.action,\n        color: action.payload.color,\n        modalBody: action.payload.body\n      });\n    },\n    sendCommentStatusRequest: function sendCommentStatusRequest(state) {\n      state.reRunComponent = _objectSpread(_objectSpread({}, state.reRunComponent), {}, {\n        isDataChanged: false\n      });\n      state.commentModal = _objectSpread(_objectSpread({}, state.commentModal), {}, {\n        isLoading: true\n      });\n    },\n    getstatusResponse: function getstatusResponse(state, action) {\n      state.reRunComponent = _objectSpread(_objectSpread({}, state.reRunComponent), {}, {\n        isDataChanged: true\n      });\n      state.commentModal = _objectSpread(_objectSpread({}, state.commentModal), {}, {\n        isLoading: false,\n        modalAction: \"\",\n        color: action.payload.color,\n        modalBody: action.payload.msg\n      });\n    },\n    closeCommentModal: function closeCommentModal(state) {\n      state.commentModal = {\n        id: 0,\n        isModalOpen: false,\n        modalHeading: \"\",\n        modalAction: \"\",\n        isLoading: false,\n        isDataUpdated: false,\n        modalBody: \"\",\n        msg: \"\",\n        color: \"\"\n      };\n    },\n    getAllCommentData: function getAllCommentData(state, action) {\n      state.tableData = {\n        data: action.payload.data,\n        isDataLoaded: true\n      };\n    },\n    sendInitialRequest: function sendInitialRequest(state) {\n      state.tableData = _objectSpread(_objectSpread({}, state.tableData), {}, {\n        isDataLoaded: false\n      });\n    },\n    updateParam: function updateParam(state, action) {\n      state.reRunComponent = _objectSpread(_objectSpread({}, state.reRunComponent), {}, {\n        queryParam: action.payload.param\n      });\n    },\n    updateFilterComment: function updateFilterComment(state, action) {\n      state.filterComment = {\n        userId: action.payload.userId\n      };\n    }\n  }\n});\nexport default commentSlice;\nexport var getCommentData = function getCommentData(data) {\n  return function (dispatch) {\n    dispatch(commentStoreAction.sendInitialRequest());\n    var url = getUrl(\"comments/get-comments/\".concat(data.id), data.param);\n    sendGetAdminApi(url).then(function (response) {\n      dispatch(commentStoreAction.getAllCommentData({\n        data: response.data.data\n      }));\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var getPostCommentData = function getPostCommentData(id) {\n  return function (dispatch) {\n    sendGetAdminApi(\"comments/get-post-comment/\".concat(id)).then(function (response) {\n      var data = {\n        data: response.data.data,\n        type: \"success\"\n      };\n      console.log(data);\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var changeCommentStatus = function changeCommentStatus(data) {\n  return function (dispatch) {\n    dispatch(commentStoreAction.sendCommentStatusRequest());\n    dispatch(commentStoreAction.getstatusResponse());\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/comment-slice.js"],"names":["createSlice","sendGetAdminApi","getUrl","commentStoreAction","initialState","tableData","data","isDataLoaded","reRunComponent","isDataChanged","queryParam","filterComment","userId","commentModal","id","isModalOpen","modalHeading","modalAction","isLoading","isDataUpdated","modalBody","msg","color","commentSlice","name","reducers","openCommentModal","state","action","payload","heading","body","sendCommentStatusRequest","getstatusResponse","closeCommentModal","getAllCommentData","sendInitialRequest","updateParam","param","updateFilterComment","getCommentData","dispatch","url","then","response","catch","error","console","log","message","getPostCommentData","type","changeCommentStatus"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendGetAdminApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { commentStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  tableData: {\r\n    data: [],\r\n    isDataLoaded: false,\r\n  },\r\n  reRunComponent: {\r\n    isDataChanged: true,\r\n    queryParam: \"\",\r\n  },\r\n  filterComment: {\r\n    userId: \"all\",\r\n  },\r\n  commentModal: {\r\n    id: 0,\r\n    isModalOpen: false,\r\n    modalHeading: \"\",\r\n    modalAction: \"\",\r\n    isLoading: false,\r\n    isDataUpdated: false,\r\n    modalBody: \"\",\r\n    msg: \"\",\r\n    color: \"\",\r\n  },\r\n};\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {\r\n    openCommentModal(state, action) {\r\n      state.commentModal = {\r\n        ...state.commentModal,\r\n        id: action.payload.id,\r\n        isModalOpen: true,\r\n        modalHeading: action.payload.heading,\r\n        modalAction: action.payload.action,\r\n        color: action.payload.color,\r\n        modalBody: action.payload.body,\r\n      };\r\n    },\r\n\r\n    sendCommentStatusRequest(state) {\r\n      state.reRunComponent = {\r\n        ...state.reRunComponent,\r\n        isDataChanged: false,\r\n      };\r\n      state.commentModal = {\r\n        ...state.commentModal,\r\n        isLoading: true,\r\n      };\r\n    },\r\n    getstatusResponse(state, action) {\r\n      state.reRunComponent = {\r\n        ...state.reRunComponent,\r\n        isDataChanged: true,\r\n      };\r\n      state.commentModal = {\r\n        ...state.commentModal,\r\n        isLoading: false,\r\n        modalAction: \"\",\r\n        color: action.payload.color,\r\n        modalBody: action.payload.msg,\r\n      };\r\n    },\r\n    closeCommentModal(state) {\r\n      state.commentModal = {\r\n        id: 0,\r\n        isModalOpen: false,\r\n        modalHeading: \"\",\r\n        modalAction: \"\",\r\n        isLoading: false,\r\n        isDataUpdated: false,\r\n        modalBody: \"\",\r\n        msg: \"\",\r\n        color: \"\",\r\n      };\r\n    },\r\n    getAllCommentData(state, action) {\r\n      state.tableData = {\r\n        data: action.payload.data,\r\n        isDataLoaded: true,\r\n      };\r\n    },\r\n    sendInitialRequest(state) {\r\n      state.tableData = {\r\n        ...state.tableData,\r\n        isDataLoaded: false,\r\n      };\r\n    },\r\n    updateParam(state, action) {\r\n      state.reRunComponent = {\r\n        ...state.reRunComponent,\r\n        queryParam: action.payload.param,\r\n      };\r\n    },\r\n    updateFilterComment(state, action) {\r\n      state.filterComment = {\r\n        userId: action.payload.userId,\r\n      };\r\n    },\r\n  },\r\n});\r\nexport default commentSlice;\r\n\r\nexport const getCommentData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(commentStoreAction.sendInitialRequest());\r\n    const url = getUrl(`comments/get-comments/${data.id}`, data.param);\r\n    sendGetAdminApi(url)\r\n      .then((response) => {\r\n        dispatch(\r\n          commentStoreAction.getAllCommentData({\r\n            data: response.data.data,\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\nexport const getPostCommentData = (id) => {\r\n  return (dispatch) => {\r\n    sendGetAdminApi(`comments/get-post-comment/${id}`)\r\n      .then((response) => {\r\n        const data = {\r\n          data: response.data.data,\r\n          type: \"success\",\r\n        };\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const changeCommentStatus = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(commentStoreAction.sendCommentStatusRequest());\r\n    dispatch(commentStoreAction.getstatusResponse());\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}