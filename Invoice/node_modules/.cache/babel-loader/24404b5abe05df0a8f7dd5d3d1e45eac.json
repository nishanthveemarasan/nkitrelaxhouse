{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { sendPostApi } from \"src/service/appService\";\nimport { loginStoreAction } from \"./store\";\nvar initialState = {\n  isLoading: false,\n  loggedInData: {\n    userName: \"\",\n    name: \"\",\n    token: null,\n    role_id: 0\n  },\n  message: {\n    msg: \"\",\n    color: \"\",\n    isLoggedIn: false\n  }\n};\nvar loginSlice = createSlice({\n  name: \"login\",\n  initialState: initialState,\n  reducers: {\n    sendLoginRequest: function sendLoginRequest(state) {\n      state.isLoading = true;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: \"Authenticating......\",\n        color: \"success\",\n        isLoggedIn: true\n      });\n    },\n    getLoginErrorResponse: function getLoginErrorResponse(state, action) {\n      state.isLoading = false;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: action.payload.msg,\n        color: action.payload.color,\n        isLoggedIn: true\n      });\n    },\n    getLoginSuccessResponse: function getLoginSuccessResponse(state, action) {\n      state.isLoading = false;\n      state.message = _objectSpread(_objectSpread({}, state.message), {}, {\n        msg: action.payload.msg,\n        color: action.payload.color,\n        isLoggedIn: true\n      });\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        name: action.payload.name\n      });\n    },\n    updateToken: function updateToken(state, action) {\n      state.loggedInData = _objectSpread(_objectSpread({}, state.loggedInData), {}, {\n        token: action.payload.token\n      });\n      console.log(state.loggedInData);\n    }\n  }\n});\nexport default loginSlice;\nexport var LoginRequest = function LoginRequest(data, history) {\n  return function (dispatch) {\n    dispatch(loginStoreAction.sendLoginRequest());\n    sendPostApi(\"user/login\", data).then(function (response) {\n      localStorage.setItem(\"token\", response.data.data.token);\n      dispatch(loginStoreAction.getLoginSuccessResponse({\n        msg: \"Authentication Successfull:Rediracting to Admin Panel!!\",\n        color: \"success\",\n        name: response.data.data.name\n      }));\n      setTimeout(function () {\n        dispatch(loginStoreAction.updateToken({\n          token: response.data.data.token\n        }));\n      }, 2000);\n    }).catch(function (error) {\n      dispatch(loginStoreAction.getLoginErrorResponse({\n        msg: error.response.data.error,\n        color: \"danger\"\n      }));\n    });\n  };\n};\n_c = LoginRequest;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRequest\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/login-store.js"],"names":["createSlice","sendPostApi","loginStoreAction","initialState","isLoading","loggedInData","userName","name","token","role_id","message","msg","color","isLoggedIn","loginSlice","reducers","sendLoginRequest","state","getLoginErrorResponse","action","payload","getLoginSuccessResponse","updateToken","console","log","LoginRequest","data","history","dispatch","then","response","localStorage","setItem","setTimeout","catch","error"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { sendPostApi } from \"src/service/appService\";\r\nimport { loginStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  loggedInData: {\r\n    userName: \"\",\r\n    name: \"\",\r\n    token: null,\r\n    role_id: 0,\r\n  },\r\n  message: {\r\n    msg: \"\",\r\n    color: \"\",\r\n    isLoggedIn: false,\r\n  },\r\n};\r\n\r\nconst loginSlice = createSlice({\r\n  name: \"login\",\r\n  initialState,\r\n  reducers: {\r\n    sendLoginRequest(state) {\r\n      state.isLoading = true;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: \"Authenticating......\",\r\n        color: \"success\",\r\n        isLoggedIn: true,\r\n      };\r\n    },\r\n\r\n    getLoginErrorResponse(state, action) {\r\n      state.isLoading = false;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: action.payload.msg,\r\n        color: action.payload.color,\r\n        isLoggedIn: true,\r\n      };\r\n    },\r\n    getLoginSuccessResponse(state, action) {\r\n      state.isLoading = false;\r\n      state.message = {\r\n        ...state.message,\r\n        msg: action.payload.msg,\r\n        color: action.payload.color,\r\n        isLoggedIn: true,\r\n      };\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        name: action.payload.name,\r\n      };\r\n    },\r\n    updateToken(state, action) {\r\n      state.loggedInData = {\r\n        ...state.loggedInData,\r\n        token: action.payload.token,\r\n      };\r\n      console.log(state.loggedInData);\r\n    },\r\n  },\r\n});\r\nexport default loginSlice;\r\n\r\nexport const LoginRequest = (data, history) => {\r\n  return (dispatch) => {\r\n    dispatch(loginStoreAction.sendLoginRequest());\r\n    sendPostApi(\"user/login\", data)\r\n      .then((response) => {\r\n        localStorage.setItem(\"token\", response.data.data.token);\r\n        dispatch(\r\n          loginStoreAction.getLoginSuccessResponse({\r\n            msg: \"Authentication Successfull:Rediracting to Admin Panel!!\",\r\n            color: \"success\",\r\n            name: response.data.data.name,\r\n          })\r\n        );\r\n        setTimeout(() => {\r\n          dispatch(\r\n            loginStoreAction.updateToken({\r\n              token: response.data.data.token,\r\n            })\r\n          );\r\n          \r\n        }, 2000);\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          loginStoreAction.getLoginErrorResponse({\r\n            msg: error.response.data.error,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}