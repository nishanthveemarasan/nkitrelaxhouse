{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Comments\\\\Comment.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Loader from \"src/Components/UI/Loader/Loader\";\nimport { getCommentData } from \"src/store/comment-slice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Comment = function Comment() {\n  _s();\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      data: state.commentStore.tableData,\n      reRun: state.commentStore.reRunComponent\n    };\n  };\n\n  var state = useSelector(mapStateToProps);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (state.reRun.isDataChanged) {\n      var data = {\n        param: state.reRun.queryParam\n      };\n      dispatch(getCommentData(data));\n    }\n  }, [state.reRun.isDataChanged, state.reRun.queryParam, dispatch]);\n  console.log(state.data.isDataLoaded);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!state.data.isDataLoaded && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 36\n    }, _this), state.data.isDataLoaded && /*#__PURE__*/_jsxDEV(CTable, {\n      header: [\"#\", \"Author\", \"Post Title\", \"Content\", \"Date Created\", \"Comments\", \"Likes\", \"Published\", \"Status\", \"Action\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Comment, \"FWkvKHga9et6MC1eWo2CBPmZzW4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Comment;\nexport default Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Comments/Comment.js"],"names":["useEffect","useSelector","useDispatch","Loader","getCommentData","Comment","mapStateToProps","state","data","commentStore","tableData","reRun","reRunComponent","dispatch","isDataChanged","param","queryParam","console","log","isDataLoaded"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,MAAP,MAAmB,iCAAnB;AACA,SAASC,cAAT,QAA+B,yBAA/B;;;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AACpB,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,WAAO;AACLC,MAAAA,IAAI,EAAED,KAAK,CAACE,YAAN,CAAmBC,SADpB;AAELC,MAAAA,KAAK,EAAEJ,KAAK,CAACE,YAAN,CAAmBG;AAFrB,KAAP;AAID,GALD;;AAMA,MAAML,KAAK,GAAGN,WAAW,CAACK,eAAD,CAAzB;AACA,MAAMO,QAAQ,GAAGX,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,KAAK,CAACI,KAAN,CAAYG,aAAhB,EAA+B;AAC7B,UAAMN,IAAI,GAAG;AACXO,QAAAA,KAAK,EAAER,KAAK,CAACI,KAAN,CAAYK;AADR,OAAb;AAGAH,MAAAA,QAAQ,CAACT,cAAc,CAACI,IAAD,CAAf,CAAR;AACD;AACF,GAPQ,EAON,CAACD,KAAK,CAACI,KAAN,CAAYG,aAAb,EAA4BP,KAAK,CAACI,KAAN,CAAYK,UAAxC,EAAoDH,QAApD,CAPM,CAAT;AAQAI,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACC,IAAN,CAAWW,YAAvB;AACA,sBACE;AAAA,eACG,CAACZ,KAAK,CAACC,IAAN,CAAWW,YAAZ,iBAA4B,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aAD/B,EAEGZ,KAAK,CAACC,IAAN,CAAWW,YAAX,iBACC,QAAC,MAAD;AACE,MAAA,MAAM,EAAE,CACN,GADM,EAEN,QAFM,EAGN,YAHM,EAIN,SAJM,EAKN,cALM,EAMN,UANM,EAON,OAPM,EAQN,WARM,EASN,QATM,EAUN,QAVM;AADV;AAAA;AAAA;AAAA;AAAA,aAHJ;AAAA,kBADF;AAqBD,CAvCD;;GAAMd,O;UAOUJ,W,EACGC,W;;;KARbG,O;AAwCN,eAAeA,OAAf","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Loader from \"src/Components/UI/Loader/Loader\";\r\nimport { getCommentData } from \"src/store/comment-slice\";\r\nconst Comment = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.commentStore.tableData,\r\n      reRun: state.commentStore.reRunComponent,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (state.reRun.isDataChanged) {\r\n      const data = {\r\n        param: state.reRun.queryParam,\r\n      };\r\n      dispatch(getCommentData(data));\r\n    }\r\n  }, [state.reRun.isDataChanged, state.reRun.queryParam, dispatch]);\r\n  console.log(state.data.isDataLoaded);\r\n  return (\r\n    <>\r\n      {!state.data.isDataLoaded && <Loader />}\r\n      {state.data.isDataLoaded && (\r\n        <CTable\r\n          header={[\r\n            \"#\",\r\n            \"Author\",\r\n            \"Post Title\",\r\n            \"Content\",\r\n            \"Date Created\",\r\n            \"Comments\",\r\n            \"Likes\",\r\n            \"Published\",\r\n            \"Status\",\r\n            \"Action\",\r\n          ]}\r\n        ></CTable>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Comment;\r\n"]},"metadata":{},"sourceType":"module"}