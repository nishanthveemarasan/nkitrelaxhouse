{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Users\\\\UserDetail\\\\PasswordReset.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { CCol, CRow } from \"@coreui/react\";\nimport { Form } from \"react-bootstrap\";\nimport CButton from \"src/Components/UI/Button/Button\";\nimport Card from \"src/Components/UI/Card/Card\";\nimport FormGroup from \"src/Components/UI/Input/FormGroup\";\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\nimport { generateRandomPassword } from \"src/service/customService\";\nimport useFormValidate from \"src/Hooks/input-validation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PasswordReset = function PasswordReset(props) {\n  _s();\n\n  var data = props.body;\n\n  var _useFormValidate = useFormValidate(),\n      password = _useFormValidate.inputValue,\n      setPassword = _useFormValidate.setInputValue,\n      passwordChangeHandler = _useFormValidate.inputChangeHandler;\n\n  var _useFormValidate2 = useFormValidate(),\n      password_confirmation = _useFormValidate2.inputValue,\n      setPasswordConfirmation = _useFormValidate2.setInputValue,\n      passwordConfirmationChangeHandler = _useFormValidate2.inputChangeHandler;\n\n  var generateRandomPasswordHandler = function generateRandomPasswordHandler() {\n    var password = generateRandomPassword(15);\n    console.log(password);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    color: \"primary\",\n    header: \"Change Password\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          placeholder: \"New Password\",\n          type: \"password\",\n          group: \"view\",\n          md: 9,\n          sm: 12\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(CCol, {\n          md: 3,\n          sm: 12,\n          className: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"light\",\n            width: \"30%\",\n            type: \"button\",\n            loading: false,\n            name: \"generate\",\n            block: true,\n            click: generateRandomPasswordHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(FormInputLabel, {\n          label: false,\n          type: \"text\",\n          readOnly: false,\n          md: 9,\n          sm: 12,\n          placeHolder: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(CCol, {\n          md: 12,\n          sm: 12,\n          className: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(CButton, {\n            color: \"success\",\n            width: \"30%\",\n            type: \"submit\",\n            loading: false,\n            name: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PasswordReset, \"yNwZhBAbIl0JGvpK8oEGNSN5mG8=\", false, function () {\n  return [useFormValidate, useFormValidate];\n});\n\n_c = PasswordReset;\nexport default PasswordReset;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordReset\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Users/UserDetail/PasswordReset.js"],"names":["useState","CCol","CRow","Form","CButton","Card","FormGroup","FormInputLabel","generateRandomPassword","useFormValidate","PasswordReset","props","data","body","password","inputValue","setPassword","setInputValue","passwordChangeHandler","inputChangeHandler","password_confirmation","setPasswordConfirmation","passwordConfirmationChangeHandler","generateRandomPasswordHandler","console","log"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,IAAP,MAAiB,6BAAjB;AACA,OAAOC,SAAP,MAAsB,mCAAtB;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,OAAOC,eAAP,MAA4B,4BAA5B;;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA;;AAC/B,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAnB;;AACA,yBAIIJ,eAAe,EAJnB;AAAA,MACcK,QADd,oBACEC,UADF;AAAA,MAEiBC,WAFjB,oBAEEC,aAFF;AAAA,MAGsBC,qBAHtB,oBAGEC,kBAHF;;AAKA,0BAIIV,eAAe,EAJnB;AAAA,MACcW,qBADd,qBACEL,UADF;AAAA,MAEiBM,uBAFjB,qBAEEJ,aAFF;AAAA,MAGsBK,iCAHtB,qBAGEH,kBAHF;;AAKA,MAAMI,6BAA6B,GAAG,SAAhCA,6BAAgC,GAAM;AAC1C,QAAMT,QAAQ,GAAGN,sBAAsB,CAAC,EAAD,CAAvC;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ;AACD,GAHD;;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,SAAZ;AAAsB,IAAA,MAAM,EAAC,iBAA7B;AAAA,2BACE,QAAC,IAAD;AAAA,8BACE,QAAC,IAAD;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,WAAW,EAAC,cADd;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,KAAK,EAAC,MAHR;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE;AALN;AAAA;AAAA;AAAA;AAAA,iBADF,eAQE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAE,CAAV;AAAa,UAAA,EAAE,EAAE,EAAjB;AAAqB,UAAA,SAAS,EAAC,YAA/B;AAAA,iCACE,QAAC,OAAD;AACE,YAAA,KAAK,EAAC,OADR;AAEE,YAAA,KAAK,EAAC,KAFR;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,OAAO,EAAE,KAJX;AAKE,YAAA,IAAI,EAAC,UALP;AAME,YAAA,KAAK,EAAE,IANT;AAOE,YAAA,KAAK,EAAES;AAPT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBARF;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAqBE,QAAC,IAAD;AAAA,+BACE,QAAC,cAAD;AACE,UAAA,KAAK,EAAE,KADT;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,QAAQ,EAAE,KAHZ;AAIE,UAAA,EAAE,EAAE,CAJN;AAKE,UAAA,EAAE,EAAE,EALN;AAME,UAAA,WAAW,EAAC;AANd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eArBF,eA+BE,QAAC,IAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAE,EAAV;AAAc,UAAA,EAAE,EAAE,EAAlB;AAAsB,UAAA,SAAS,EAAC,YAAhC;AAAA,iCACE,QAAC,OAAD;AACE,YAAA,KAAK,EAAC,SADR;AAEE,YAAA,KAAK,EAAC,KAFR;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,OAAO,EAAE,KAJX;AAKE,YAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AA+CD,CA/DD;;GAAMb,a;UAMAD,e,EAKAA,e;;;KAXAC,a;AAiEN,eAAeA,aAAf","sourcesContent":["import { useState } from \"react\";\r\nimport { CCol, CRow } from \"@coreui/react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\nimport Card from \"src/Components/UI/Card/Card\";\r\nimport FormGroup from \"src/Components/UI/Input/FormGroup\";\r\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\r\nimport { generateRandomPassword } from \"src/service/customService\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nconst PasswordReset = (props) => {\r\n  const data = props.body;\r\n  const {\r\n    inputValue: password,\r\n    setInputValue: setPassword,\r\n    inputChangeHandler: passwordChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: password_confirmation,\r\n    setInputValue: setPasswordConfirmation,\r\n    inputChangeHandler: passwordConfirmationChangeHandler,\r\n  } = useFormValidate();\r\n  const generateRandomPasswordHandler = () => {\r\n    const password = generateRandomPassword(15);\r\n    console.log(password);\r\n  };\r\n  return (\r\n    <Card color=\"primary\" header=\"Change Password\">\r\n      <Form>\r\n        <CRow>\r\n          <FormGroup\r\n            placeholder=\"New Password\"\r\n            type=\"password\"\r\n            group=\"view\"\r\n            md={9}\r\n            sm={12}\r\n          />\r\n          <CCol md={3} sm={12} className=\"text-right\">\r\n            <CButton\r\n              color=\"light\"\r\n              width=\"30%\"\r\n              type=\"button\"\r\n              loading={false}\r\n              name=\"generate\"\r\n              block={true}\r\n              click={generateRandomPasswordHandler}\r\n            />\r\n          </CCol>\r\n        </CRow>\r\n        <CRow>\r\n          <FormInputLabel\r\n            label={false}\r\n            type=\"text\"\r\n            readOnly={false}\r\n            md={9}\r\n            sm={12}\r\n            placeHolder=\"Confirm Password\"\r\n          />\r\n        </CRow>\r\n        <CRow>\r\n          <CCol md={12} sm={12} className=\"text-right\">\r\n            <CButton\r\n              color=\"success\"\r\n              width=\"30%\"\r\n              type=\"submit\"\r\n              loading={false}\r\n              name=\"Reset\"\r\n            />\r\n          </CCol>\r\n        </CRow>\r\n      </Form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PasswordReset;\r\n"]},"metadata":{},"sourceType":"module"}