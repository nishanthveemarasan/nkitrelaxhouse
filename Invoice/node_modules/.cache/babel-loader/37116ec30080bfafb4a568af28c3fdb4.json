{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport API from \"src/axios/axios\";\nimport { sendGetAdminApi, sendPostAdminApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { postStoreAction } from \"./store\";\nvar initialState = {\n  isPostDataLoaded: false,\n  postData: [],\n  reRunPostComponent: {\n    isDataChanged: true,\n    queryParam: \"\",\n    id: \"all\"\n  },\n  postModalData: {\n    postData: \"\",\n    postId: 0,\n    ModalHeading: \"\",\n    ModalAction: \"\",\n    isModalOpen: false,\n    status: \"\",\n    variant: \"\"\n  },\n  updatePostModalData: {\n    isLoading: false,\n    isUpdated: false,\n    msg: \"\",\n    variant: \"\"\n  },\n  addPostModalData: {\n    isLoading: false,\n    modalHeading: \"Add A New Post\",\n    modalActionButton: \"Create\",\n    isModalOpen: false,\n    variant: \"primary\"\n  },\n  singlePostData: {\n    data: [],\n    isDataReceived: false,\n    type: \"\"\n  }\n};\nvar postSlice = createSlice({\n  name: \"posts\",\n  initialState: initialState,\n  reducers: {\n    openCreateModal: function openCreateModal(state) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isModalOpen: true\n      });\n    },\n    updateParam: function updateParam(state, action) {\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        queryParam: action.payload.param\n      });\n    },\n    sendSinglePostRequest: function sendSinglePostRequest(state, action) {\n      state.singlePostData = _objectSpread(_objectSpread({}, state.singlePostData), {}, {\n        isDataReceived: true,\n        type: action.payload.type\n      });\n    },\n    updateSinglePostRequest: function updateSinglePostRequest(state, action) {\n      state.singlePostData = _objectSpread(_objectSpread({}, state.singlePostData), {}, {\n        isDataReceived: false,\n        data: action.payload.data\n      });\n    },\n    sendingAddPostData: function sendingAddPostData(state) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isLoading: true\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: false\n      });\n    },\n    AddPostCreatedData: function AddPostCreatedData(state, action) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isLoading: false\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: true\n      });\n      state.updatePostModalData = _objectSpread(_objectSpread({}, state.updatePostModalData), {}, {\n        isUpdated: true,\n        msg: action.payload.msg,\n        variant: action.payload.color\n      });\n    },\n    getData: function getData(state, action) {\n      state.isPostDataLoaded = true;\n      state.postData = action.payload.post;\n    },\n    sendInitialRequest: function sendInitialRequest(state) {\n      state.isPostDataLoaded = false;\n    },\n    openPostEditModal: function openPostEditModal(state, action) {\n      state.postModalData = {\n        postData: action.payload.postData,\n        postId: action.payload.id,\n        ModalAction: action.payload.action,\n        isModalOpen: true,\n        status: action.payload.status,\n        ModalHeading: action.payload.action === \"Update\" ? \"Update the Post\" : \"Enable/Disable the post\",\n        variant: action.payload.action === \"Update\" ? \"primary\" : action.payload.status === \"active\" ? \"success\" : \"danger\"\n      };\n    },\n    updatingModalData: function updatingModalData(state) {\n      state.updatePostModalData = _objectSpread(_objectSpread({}, state.updatePostModalData), {}, {\n        isLoading: true,\n        isUpdated: false\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: false\n      });\n    },\n    postDataUpdated: function postDataUpdated(state, action) {\n      state.updatePostModalData = {\n        isLoading: false,\n        isUpdated: true,\n        msg: action.payload.msg,\n        variant: action.payload.color,\n        ModalAction: action.payload.action\n      };\n      console.log();\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: true\n      });\n    },\n    closeModal: function closeModal(state) {\n      state.postModalData = {\n        postData: \"\",\n        postId: 0,\n        ModalHeading: \"\",\n        ModalAction: \"\",\n        isModalOpen: false,\n        variant: \"\"\n      };\n      state.updatePostModalData = {\n        isLoading: false,\n        isUpdated: false,\n        msg: \"\",\n        variant: \"\"\n      };\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isModalOpen: false\n      });\n    }\n  }\n});\nexport default postSlice;\nexport var getPostData = function getPostData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.sendInitialRequest());\n    var url = getUrl(\"posts/get-posts/\".concat(data.id), data.param);\n    sendGetAdminApi(url).then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(postStoreAction.getData({\n          post: response.data.data\n        }));\n      }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var openPostModal = function openPostModal(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.openPostEditModal(data));\n  };\n};\nexport var updatePostModalData = function updatePostModalData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.updatingModalData());\n    sendPostAdminApi(\"posts/edit\", data).then(function (response) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: response.data.data.msg,\n        color: \"success\",\n        action: \"Update\"\n      }));\n    }).catch(function (error) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: error.response.data.msg,\n        color: \"danger\",\n        action: \"Update\"\n      }));\n    });\n  };\n};\nexport var deletePostModalData = function deletePostModalData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.updatingModalData());\n    sendPostAdminApi(\"posts/delete\", data).then(function (response) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: response.data.data.msg,\n        color: \"success\",\n        action: \"success\"\n      }));\n    }).catch(function (error) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: error.response.data.msg,\n        color: \"danger\",\n        action: \"Delete\"\n      }));\n    });\n  };\n};\nexport var closePostModal = function closePostModal() {\n  return function (dispatch) {\n    dispatch(postStoreAction.closeModal());\n  };\n};\nexport var openAddPostModal = function openAddPostModal() {\n  return function (dispatch) {\n    dispatch(postStoreAction.openCreateModal());\n  };\n};\nexport var addPostData = function addPostData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.sendingAddPostData());\n    sendPostAdminApi(\"posts/create\", data).then(function (response) {\n      var msg = response.data.data.msg;\n      dispatch(postStoreAction.AddPostCreatedData({\n        msg: msg,\n        color: \"success\"\n      }));\n    }).catch(function (error) {\n      console.log(error.response);\n      dispatch(postStoreAction.AddPostCreatedData({\n        msg: error.response.data.error,\n        color: \"danger\"\n      }));\n    });\n  };\n};\nexport var getSinglePostData = function getSinglePostData(id, type) {\n  return function (dispatch) {\n    dispatch(postStoreAction.sendSinglePostRequest({\n      type: type\n    }));\n    sendGetAdminApi(\"posts/get-post/\".concat(id)).then(function (response) {\n      dispatch(postStoreAction.updateSinglePostRequest({\n        data: response.data.data\n      }));\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/post.slice.js"],"names":["createSlice","API","sendGetAdminApi","sendPostAdminApi","getUrl","postStoreAction","initialState","isPostDataLoaded","postData","reRunPostComponent","isDataChanged","queryParam","id","postModalData","postId","ModalHeading","ModalAction","isModalOpen","status","variant","updatePostModalData","isLoading","isUpdated","msg","addPostModalData","modalHeading","modalActionButton","singlePostData","data","isDataReceived","type","postSlice","name","reducers","openCreateModal","state","updateParam","action","payload","param","sendSinglePostRequest","updateSinglePostRequest","sendingAddPostData","AddPostCreatedData","color","getData","post","sendInitialRequest","openPostEditModal","updatingModalData","postDataUpdated","console","log","closeModal","getPostData","dispatch","url","then","response","http_status","catch","error","message","openPostModal","deletePostModalData","closePostModal","openAddPostModal","addPostData","getSinglePostData"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\nimport { sendGetAdminApi, sendPostAdminApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { postStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isPostDataLoaded: false,\r\n  postData: [],\r\n  reRunPostComponent: {\r\n    isDataChanged: true,\r\n    queryParam: \"\",\r\n    id: \"all\",\r\n  },\r\n  postModalData: {\r\n    postData: \"\",\r\n    postId: 0,\r\n    ModalHeading: \"\",\r\n    ModalAction: \"\",\r\n    isModalOpen: false,\r\n    status: \"\",\r\n    variant: \"\",\r\n  },\r\n  updatePostModalData: {\r\n    isLoading: false,\r\n    isUpdated: false,\r\n    msg: \"\",\r\n    variant: \"\",\r\n  },\r\n  addPostModalData: {\r\n    isLoading: false,\r\n    modalHeading: \"Add A New Post\",\r\n    modalActionButton: \"Create\",\r\n    isModalOpen: false,\r\n    variant: \"primary\",\r\n  },\r\n  singlePostData: {\r\n    data: [],\r\n    isDataReceived: false,\r\n    type: \"\",\r\n  },\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    openCreateModal(state) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isModalOpen: true,\r\n      };\r\n    },\r\n    updateParam(state, action) {\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        queryParam: action.payload.param,\r\n      };\r\n    },\r\n    sendSinglePostRequest(state, action) {\r\n      state.singlePostData = {\r\n        ...state.singlePostData,\r\n        isDataReceived: true,\r\n        type: action.payload.type,\r\n      };\r\n    },\r\n    updateSinglePostRequest(state, action) {\r\n      state.singlePostData = {\r\n        ...state.singlePostData,\r\n        isDataReceived: false,\r\n        data: action.payload.data,\r\n      };\r\n    },\r\n    sendingAddPostData(state) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isLoading: true,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: false,\r\n      };\r\n    },\r\n    AddPostCreatedData(state, action) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isLoading: false,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: true,\r\n      };\r\n      state.updatePostModalData = {\r\n        ...state.updatePostModalData,\r\n        isUpdated: true,\r\n        msg: action.payload.msg,\r\n        variant: action.payload.color,\r\n      };\r\n    },\r\n    getData(state, action) {\r\n      state.isPostDataLoaded = true;\r\n      state.postData = action.payload.post;\r\n    },\r\n    sendInitialRequest(state) {\r\n      state.isPostDataLoaded = false;\r\n    },\r\n    openPostEditModal(state, action) {\r\n      state.postModalData = {\r\n        postData: action.payload.postData,\r\n        postId: action.payload.id,\r\n        ModalAction: action.payload.action,\r\n        isModalOpen: true,\r\n        status: action.payload.status,\r\n        ModalHeading:\r\n          action.payload.action === \"Update\"\r\n            ? \"Update the Post\"\r\n            : \"Enable/Disable the post\",\r\n        variant:\r\n          action.payload.action === \"Update\"\r\n            ? \"primary\"\r\n            : action.payload.status === \"active\"\r\n            ? \"success\"\r\n            : \"danger\",\r\n      };\r\n    },\r\n    updatingModalData(state) {\r\n      state.updatePostModalData = {\r\n        ...state.updatePostModalData,\r\n        isLoading: true,\r\n        isUpdated: false,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: false,\r\n      };\r\n    },\r\n    postDataUpdated(state, action) {\r\n      state.updatePostModalData = {\r\n        isLoading: false,\r\n        isUpdated: true,\r\n        msg: action.payload.msg,\r\n        variant: action.payload.color,\r\n        ModalAction: action.payload.action,\r\n      };\r\n      console.log();\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: true,\r\n      };\r\n    },\r\n    closeModal(state) {\r\n      state.postModalData = {\r\n        postData: \"\",\r\n        postId: 0,\r\n        ModalHeading: \"\",\r\n        ModalAction: \"\",\r\n        isModalOpen: false,\r\n        variant: \"\",\r\n      };\r\n      state.updatePostModalData = {\r\n        isLoading: false,\r\n        isUpdated: false,\r\n        msg: \"\",\r\n        variant: \"\",\r\n      };\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isModalOpen: false,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport default postSlice;\r\n\r\nexport const getPostData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.sendInitialRequest());\r\n    const url = getUrl(`posts/get-posts/${data.id}`, data.param);\r\n    sendGetAdminApi(url)\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(postStoreAction.getData({ post: response.data.data }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const openPostModal = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.openPostEditModal(data));\r\n  };\r\n};\r\n\r\nexport const updatePostModalData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.updatingModalData());\r\n    sendPostAdminApi(\"posts/edit\", data)\r\n      .then((response) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: response.data.data.msg,\r\n            color: \"success\",\r\n            action: \"Update\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: error.response.data.msg,\r\n            color: \"danger\",\r\n            action: \"Update\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\nexport const deletePostModalData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.updatingModalData());\r\n    sendPostAdminApi(`posts/delete`, data)\r\n      .then((response) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: response.data.data.msg,\r\n            color: \"success\",\r\n            action: \"success\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: error.response.data.msg,\r\n            color: \"danger\",\r\n            action: \"Delete\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\n\r\nexport const closePostModal = () => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.closeModal());\r\n  };\r\n};\r\n\r\nexport const openAddPostModal = () => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.openCreateModal());\r\n  };\r\n};\r\n\r\nexport const addPostData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.sendingAddPostData());\r\n    sendPostAdminApi(`posts/create`, data)\r\n      .then((response) => {\r\n        const msg = response.data.data.msg;\r\n        dispatch(\r\n          postStoreAction.AddPostCreatedData({\r\n            msg: msg,\r\n            color: \"success\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n        dispatch(\r\n          postStoreAction.AddPostCreatedData({\r\n            msg: error.response.data.error,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\n\r\nexport const getSinglePostData = (id, type) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.sendSinglePostRequest({ type }));\r\n    sendGetAdminApi(`posts/get-post/${id}`)\r\n      .then((response) => {\r\n        dispatch(\r\n          postStoreAction.updateSinglePostRequest({\r\n            data: response.data.data,\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}