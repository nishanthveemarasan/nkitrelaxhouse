{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport API from \"src/axios/axios\";\nimport { sendGetAdminApi } from \"src/service/appService\";\nimport { getUrl } from \"src/service/customService\";\nimport { postStoreAction } from \"./store\";\nvar initialState = {\n  isPostDataLoaded: false,\n  postData: [],\n  reRunPostComponent: {\n    isDataChanged: true,\n    queryParam: \"\",\n    id: \"all\"\n  },\n  postModalData: {\n    postData: \"\",\n    postId: 0,\n    ModalHeading: \"\",\n    ModalAction: \"\",\n    isModalOpen: false,\n    variant: \"\"\n  },\n  updatePostModalData: {\n    isLoading: false,\n    isUpdated: false,\n    msg: \"\",\n    variant: \"\"\n  },\n  addPostModalData: {\n    isLoading: false,\n    modalHeading: \"Add A New Post\",\n    modalActionButton: \"Create\",\n    isModalOpen: false,\n    variant: \"primary\"\n  },\n  singlePostData: {\n    data: [],\n    isDataReceived: false\n  }\n};\nvar postSlice = createSlice({\n  name: \"posts\",\n  initialState: initialState,\n  reducers: {\n    openCreateModal: function openCreateModal(state) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isModalOpen: true\n      });\n    },\n    updateParam: function updateParam(state, action) {\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        queryParam: action.payload.param\n      });\n    },\n    sendSinglePostRequest: function sendSinglePostRequest(state) {\n      state.singlePostData = _objectSpread(_objectSpread({}, state.singlePostData), {}, {\n        isDataReceived: true\n      });\n    },\n    sendingAddPostData: function sendingAddPostData(state) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isLoading: true\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: false\n      });\n    },\n    AddPostCreatedData: function AddPostCreatedData(state, action) {\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isLoading: false\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: true\n      });\n      state.updatePostModalData = _objectSpread(_objectSpread({}, state.updatePostModalData), {}, {\n        isUpdated: true,\n        msg: action.payload.msg,\n        variant: action.payload.color\n      });\n    },\n    getData: function getData(state, action) {\n      state.isPostDataLoaded = true;\n      state.postData = action.payload.post;\n    },\n    openPostEditModal: function openPostEditModal(state, action) {\n      state.postModalData = {\n        postData: action.payload.postData,\n        postId: action.payload.id,\n        ModalAction: action.payload.action,\n        isModalOpen: true,\n        ModalHeading: action.payload.action === \"Update\" ? \"Update the Post\" : \"Delete the post\",\n        variant: action.payload.action === \"Update\" ? \"primary\" : \"danger\"\n      };\n    },\n    updatingModalData: function updatingModalData(state) {\n      state.updatePostModalData = _objectSpread(_objectSpread({}, state.updatePostModalData), {}, {\n        isLoading: true,\n        isUpdated: false\n      });\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: false\n      });\n    },\n    postDataUpdated: function postDataUpdated(state, action) {\n      state.updatePostModalData = {\n        isLoading: false,\n        isUpdated: true,\n        msg: action.payload.msg,\n        variant: action.payload.color\n      };\n      state.reRunPostComponent = _objectSpread(_objectSpread({}, state.reRunPostComponent), {}, {\n        isDataChanged: true\n      });\n    },\n    closeModal: function closeModal(state) {\n      state.postModalData = {\n        postData: \"\",\n        postId: 0,\n        ModalHeading: \"\",\n        ModalAction: \"\",\n        isModalOpen: false,\n        variant: \"\"\n      };\n      state.updatePostModalData = {\n        isLoading: false,\n        isUpdated: false,\n        msg: \"\",\n        variant: \"\"\n      };\n      state.addPostModalData = _objectSpread(_objectSpread({}, state.addPostModalData), {}, {\n        isModalOpen: false\n      });\n    }\n  }\n});\nexport default postSlice;\nexport var getPostData = function getPostData(data) {\n  return function (dispatch) {\n    var url = getUrl(\"posts/get-posts/\".concat(data.id), data.param);\n    sendGetAdminApi(url).then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(postStoreAction.getData({\n          post: response.data.data\n        }));\n      }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};\nexport var openPostModal = function openPostModal(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.openPostEditModal(data));\n  };\n};\nexport var updatePostModalData = function updatePostModalData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.updatingModalData());\n    API.post(\"posts/edit\", data).then(function (response) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: response.data.data.msg,\n        color: \"success\"\n      }));\n    }).catch(function (error) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: error.response.data.msg,\n        color: \"danger\"\n      }));\n    });\n  };\n};\nexport var deletePostModalData = function deletePostModalData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.updatingModalData());\n    API.get(\"posts/delete/\".concat(data.id)).then(function (response) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: response.data.data.msg,\n        color: \"success\"\n      }));\n    }).catch(function (error) {\n      dispatch(postStoreAction.postDataUpdated({\n        msg: error.response.data.msg,\n        color: \"danger\"\n      }));\n    });\n  };\n};\nexport var closePostModal = function closePostModal() {\n  return function (dispatch) {\n    dispatch(postStoreAction.closeModal());\n  };\n};\nexport var openAddPostModal = function openAddPostModal() {\n  return function (dispatch) {\n    dispatch(postStoreAction.openCreateModal());\n  };\n};\nexport var addPostData = function addPostData(data) {\n  return function (dispatch) {\n    dispatch(postStoreAction.sendingAddPostData());\n    console.log(data);\n    API.post(\"posts/create\", data).then(function (response) {\n      var msg = response.data.data.msg;\n      dispatch(postStoreAction.AddPostCreatedData({\n        msg: msg,\n        color: \"success\"\n      }));\n    }).catch(function (error) {\n      console.log(error.response);\n      dispatch(postStoreAction.AddPostCreatedData({\n        msg: error.response.data.error,\n        color: \"danger\"\n      }));\n    });\n  };\n};\nexport var getSinglePostData = function getSinglePostData(id) {\n  return function (dispatch) {\n    sendGetAdminApi(\"\").then(function (response) {\n      if (response.data.http_status === 200) {\n        dispatch(postStoreAction.getData({\n          post: response.data.data\n        }));\n      }\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/store/post.slice.js"],"names":["createSlice","API","sendGetAdminApi","getUrl","postStoreAction","initialState","isPostDataLoaded","postData","reRunPostComponent","isDataChanged","queryParam","id","postModalData","postId","ModalHeading","ModalAction","isModalOpen","variant","updatePostModalData","isLoading","isUpdated","msg","addPostModalData","modalHeading","modalActionButton","singlePostData","data","isDataReceived","postSlice","name","reducers","openCreateModal","state","updateParam","action","payload","param","sendSinglePostRequest","sendingAddPostData","AddPostCreatedData","color","getData","post","openPostEditModal","updatingModalData","postDataUpdated","closeModal","getPostData","dispatch","url","then","response","http_status","catch","error","console","log","message","openPostModal","deletePostModalData","get","closePostModal","openAddPostModal","addPostData","getSinglePostData"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport API from \"src/axios/axios\";\r\nimport { sendGetAdminApi } from \"src/service/appService\";\r\nimport { getUrl } from \"src/service/customService\";\r\nimport { postStoreAction } from \"./store\";\r\n\r\nconst initialState = {\r\n  isPostDataLoaded: false,\r\n  postData: [],\r\n  reRunPostComponent: {\r\n    isDataChanged: true,\r\n    queryParam: \"\",\r\n    id: \"all\",\r\n  },\r\n  postModalData: {\r\n    postData: \"\",\r\n    postId: 0,\r\n    ModalHeading: \"\",\r\n    ModalAction: \"\",\r\n    isModalOpen: false,\r\n    variant: \"\",\r\n  },\r\n  updatePostModalData: {\r\n    isLoading: false,\r\n    isUpdated: false,\r\n    msg: \"\",\r\n    variant: \"\",\r\n  },\r\n  addPostModalData: {\r\n    isLoading: false,\r\n    modalHeading: \"Add A New Post\",\r\n    modalActionButton: \"Create\",\r\n    isModalOpen: false,\r\n    variant: \"primary\",\r\n  },\r\n  singlePostData: {\r\n    data: [],\r\n    isDataReceived: false,\r\n  },\r\n};\r\n\r\nconst postSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {\r\n    openCreateModal(state) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isModalOpen: true,\r\n      };\r\n    },\r\n    updateParam(state, action) {\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        queryParam: action.payload.param,\r\n      };\r\n    },\r\n    sendSinglePostRequest(state) {\r\n      state.singlePostData = {\r\n        ...state.singlePostData,\r\n        isDataReceived: true,\r\n      };\r\n    },\r\n    sendingAddPostData(state) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isLoading: true,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: false,\r\n      };\r\n    },\r\n    AddPostCreatedData(state, action) {\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isLoading: false,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: true,\r\n      };\r\n      state.updatePostModalData = {\r\n        ...state.updatePostModalData,\r\n        isUpdated: true,\r\n        msg: action.payload.msg,\r\n        variant: action.payload.color,\r\n      };\r\n    },\r\n    getData(state, action) {\r\n      state.isPostDataLoaded = true;\r\n      state.postData = action.payload.post;\r\n    },\r\n    openPostEditModal(state, action) {\r\n      state.postModalData = {\r\n        postData: action.payload.postData,\r\n        postId: action.payload.id,\r\n        ModalAction: action.payload.action,\r\n        isModalOpen: true,\r\n        ModalHeading:\r\n          action.payload.action === \"Update\"\r\n            ? \"Update the Post\"\r\n            : \"Delete the post\",\r\n        variant: action.payload.action === \"Update\" ? \"primary\" : \"danger\",\r\n      };\r\n    },\r\n    updatingModalData(state) {\r\n      state.updatePostModalData = {\r\n        ...state.updatePostModalData,\r\n        isLoading: true,\r\n        isUpdated: false,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: false,\r\n      };\r\n    },\r\n    postDataUpdated(state, action) {\r\n      state.updatePostModalData = {\r\n        isLoading: false,\r\n        isUpdated: true,\r\n        msg: action.payload.msg,\r\n        variant: action.payload.color,\r\n      };\r\n      state.reRunPostComponent = {\r\n        ...state.reRunPostComponent,\r\n        isDataChanged: true,\r\n      };\r\n    },\r\n    closeModal(state) {\r\n      state.postModalData = {\r\n        postData: \"\",\r\n        postId: 0,\r\n        ModalHeading: \"\",\r\n        ModalAction: \"\",\r\n        isModalOpen: false,\r\n        variant: \"\",\r\n      };\r\n      state.updatePostModalData = {\r\n        isLoading: false,\r\n        isUpdated: false,\r\n        msg: \"\",\r\n        variant: \"\",\r\n      };\r\n      state.addPostModalData = {\r\n        ...state.addPostModalData,\r\n        isModalOpen: false,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport default postSlice;\r\n\r\nexport const getPostData = (data) => {\r\n  return (dispatch) => {\r\n    const url = getUrl(`posts/get-posts/${data.id}`, data.param);\r\n    sendGetAdminApi(url)\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(postStoreAction.getData({ post: response.data.data }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n\r\nexport const openPostModal = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.openPostEditModal(data));\r\n  };\r\n};\r\n\r\nexport const updatePostModalData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.updatingModalData());\r\n    API.post(\"posts/edit\", data)\r\n      .then((response) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: response.data.data.msg,\r\n            color: \"success\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: error.response.data.msg,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\nexport const deletePostModalData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.updatingModalData());\r\n    API.get(`posts/delete/${data.id}`)\r\n      .then((response) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: response.data.data.msg,\r\n            color: \"success\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          postStoreAction.postDataUpdated({\r\n            msg: error.response.data.msg,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\n\r\nexport const closePostModal = () => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.closeModal());\r\n  };\r\n};\r\n\r\nexport const openAddPostModal = () => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.openCreateModal());\r\n  };\r\n};\r\n\r\nexport const addPostData = (data) => {\r\n  return (dispatch) => {\r\n    dispatch(postStoreAction.sendingAddPostData());\r\n    console.log(data);\r\n    API.post(`posts/create`, data)\r\n      .then((response) => {\r\n        const msg = response.data.data.msg;\r\n        dispatch(\r\n          postStoreAction.AddPostCreatedData({\r\n            msg: msg,\r\n            color: \"success\",\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n        dispatch(\r\n          postStoreAction.AddPostCreatedData({\r\n            msg: error.response.data.error,\r\n            color: \"danger\",\r\n          })\r\n        );\r\n      });\r\n  };\r\n};\r\n\r\nexport const getSinglePostData = (id) => {\r\n  return (dispatch) => {\r\n    sendGetAdminApi(``)\r\n      .then((response) => {\r\n        if (response.data.http_status === 200) {\r\n          dispatch(postStoreAction.getData({ post: response.data.data }));\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}