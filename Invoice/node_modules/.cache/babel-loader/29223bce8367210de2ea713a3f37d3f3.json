{"ast":null,"code":"import _slicedToArray from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Users\\\\UserDetail\\\\Job.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { CCol, CRow } from \"@coreui/react\";\nimport { Form } from \"react-bootstrap\";\nimport CButton from \"src/Components/UI/Button/Button\";\nimport { useEffect, useState } from \"react\";\nimport Card from \"src/Components/UI/Card/Card\";\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\nimport useFormValidate from \"src/Hooks/input-validation\";\nimport { getDate } from \"src/custom-functions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Job = function Job(props) {\n  _s();\n\n  var data = props.body; // console.log(data);\n\n  var _useFormValidate = useFormValidate(),\n      jobTitle = _useFormValidate.inputValue,\n      setJobTitle = _useFormValidate.setInputValue,\n      jobTitleChangeHandler = _useFormValidate.inputChangeHandler;\n\n  var _useFormValidate2 = useFormValidate(),\n      jobStartedDate = _useFormValidate2.inputValue,\n      setJobStartedDate = _useFormValidate2.setInputValue,\n      jobStartedDateChangeHandler = _useFormValidate2.inputChangeHandler;\n\n  var _useFormValidate3 = useFormValidate(),\n      jobType = _useFormValidate3.inputValue,\n      setJobType = _useFormValidate3.setInputValue,\n      jobTypeChangeHandler = _useFormValidate3.inputChangeHandler;\n\n  useEffect(function () {\n    if (data) {\n      setJobTitle(data.job_title);\n\n      if (data.job_started_date) {\n        setJobStartedDate(getDate(data.job_started_date));\n      }\n\n      getUpperCaseString(data.job_type, \"_\");\n      setJobType(data.job_type === \"part_time\" ? \"Part Time\" : \"Full Time\");\n    }\n  }, [setJobTitle, data]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    color: \"primary\",\n    header: \"Job Information\",\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(CRow, {\n        children: /*#__PURE__*/_jsxDEV(FormInputLabel, {\n          label: \"Job Title\",\n          type: \"text\",\n          readOnly: true,\n          md: 12,\n          sm: 12,\n          value: jobTitle,\n          change: jobTitleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(CRow, {\n        children: [/*#__PURE__*/_jsxDEV(FormInputLabel, {\n          label: \"Joined Date\",\n          type: \"text\",\n          readOnly: true,\n          md: 6,\n          sm: 12,\n          value: jobStartedDate,\n          change: jobStartedDateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(FormInputLabel, {\n          label: \"Job Type\",\n          type: \"text\",\n          readOnly: true,\n          md: 6,\n          sm: 12,\n          value: jobType,\n          change: jobTypeChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Job, \"jNqshOLjhK4ulywcftIkjLwxlIE=\", false, function () {\n  return [useFormValidate, useFormValidate, useFormValidate];\n});\n\n_c = Job;\nexport default Job;\n\nvar getUpperCaseString = function getUpperCaseString(string, seperator) {\n  var word = string.split(seperator);\n  var finalString = \"\";\n\n  var _iterator = _createForOfIteratorHelper(word.entries()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          i = _step$value[1];\n\n      finalString += \"\".concat(key.charAt(0).toUpperCase()).concat(key.slice(1));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  console.log(word);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Job\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Users/UserDetail/Job.js"],"names":["CCol","CRow","Form","CButton","useEffect","useState","Card","FormInputLabel","useFormValidate","getDate","Job","props","data","body","jobTitle","inputValue","setJobTitle","setInputValue","jobTitleChangeHandler","inputChangeHandler","jobStartedDate","setJobStartedDate","jobStartedDateChangeHandler","jobType","setJobType","jobTypeChangeHandler","job_title","job_started_date","getUpperCaseString","job_type","string","seperator","word","split","finalString","entries","key","i","charAt","toUpperCase","slice","console","log"],"mappings":"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","sourcesContent":["import { CCol, CRow } from \"@coreui/react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Card from \"src/Components/UI/Card/Card\";\r\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport { getDate } from \"src/custom-functions\";\r\nconst Job = (props) => {\r\n  const data = props.body;\r\n  // console.log(data);\r\n  const {\r\n    inputValue: jobTitle,\r\n    setInputValue: setJobTitle,\r\n    inputChangeHandler: jobTitleChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: jobStartedDate,\r\n    setInputValue: setJobStartedDate,\r\n    inputChangeHandler: jobStartedDateChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: jobType,\r\n    setInputValue: setJobType,\r\n    inputChangeHandler: jobTypeChangeHandler,\r\n  } = useFormValidate();\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setJobTitle(data.job_title);\r\n      if (data.job_started_date) {\r\n        setJobStartedDate(getDate(data.job_started_date));\r\n      }\r\n      getUpperCaseString(data.job_type, \"_\");\r\n      setJobType(data.job_type === \"part_time\" ? \"Part Time\" : \"Full Time\");\r\n    }\r\n  }, [setJobTitle, data]);\r\n  return (\r\n    <Card color=\"primary\" header=\"Job Information\">\r\n      <Form>\r\n        <CRow>\r\n          <FormInputLabel\r\n            label=\"Job Title\"\r\n            type=\"text\"\r\n            readOnly={true}\r\n            md={12}\r\n            sm={12}\r\n            value={jobTitle}\r\n            change={jobTitleChangeHandler}\r\n          />\r\n        </CRow>\r\n        <CRow>\r\n          <FormInputLabel\r\n            label=\"Joined Date\"\r\n            type=\"text\"\r\n            readOnly={true}\r\n            md={6}\r\n            sm={12}\r\n            value={jobStartedDate}\r\n            change={jobStartedDateChangeHandler}\r\n          />\r\n          <FormInputLabel\r\n            label=\"Job Type\"\r\n            type=\"text\"\r\n            readOnly={true}\r\n            md={6}\r\n            sm={12}\r\n            value={jobType}\r\n            change={jobTypeChangeHandler}\r\n          />\r\n        </CRow>\r\n      </Form>\r\n    </Card>\r\n  );\r\n};\r\nexport default Job;\r\n\r\nconst getUpperCaseString = (string, seperator) => {\r\n  const word = string.split(seperator);\r\n  let finalString = \"\";\r\n  for (const [key, i] of word.entries()) {\r\n    finalString +=`${key.charAt(0).toUpperCase()}${key.slice(1)}`\r\n  }\r\n  console.log(word);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}