{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/xampp/htdocs/nkItService/relax-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\nkItService\\\\relax-frontend\\\\src\\\\Components\\\\views\\\\Product\\\\CreateModal.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport API from \"src/axios/axios\";\nimport { FormInput } from \"src/Components/UI/Input/FormInput\";\nimport CModal from \"src/Components/UI/Modal/CModal\";\nimport useFormValidate from \"src/Hooks/input-validation\";\nimport { productStoreAction } from \"src/store/store\";\nimport { Alert, Col, Row } from \"react-bootstrap\";\nimport FormRadio from \"src/Components/UI/Input/FormRadio\";\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar CreateModal = function CreateModal() {\n  _s();\n\n  var _useFormValidate = useFormValidate(),\n      productName = _useFormValidate.inputValue,\n      productNameChangeHandler = _useFormValidate.inputChangeHandler,\n      productNameRestHandler = _useFormValidate.reset;\n\n  var _useFormValidate2 = useFormValidate(),\n      productCode = _useFormValidate2.inputValue,\n      productCodeChangeHandler = _useFormValidate2.inputChangeHandler,\n      productCodeRestHandler = _useFormValidate2.reset;\n\n  var _useFormValidate3 = useFormValidate(),\n      stockCount = _useFormValidate3.inputValue,\n      stockCountChangeHandler = _useFormValidate3.inputChangeHandler,\n      stockCountRestHandler = _useFormValidate3.reset;\n\n  var _useState = useState(\"singleProduct\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      trackType = _useState2[0],\n      setTrackType = _useState2[1];\n\n  var onTrackTypeChange = function onTrackTypeChange(e) {\n    setTrackType(e.target.value);\n  };\n\n  var _useState3 = useState({\n    isLoading: false,\n    alertText: \"\",\n    alertType: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalData = _useState4[0],\n      setModalData = _useState4[1];\n\n  var mapStateToProps = function mapStateToProps(state) {\n    return {\n      openModal: state.productStore.openModal\n    };\n  };\n\n  var state = useSelector(mapStateToProps);\n  var dispatch = useDispatch();\n\n  var modalCloseHandler = function modalCloseHandler() {\n    dispatch(productStoreAction.addProductModal({\n      data: false\n    }));\n  };\n\n  var onSubmitHandler = function onSubmitHandler(e) {\n    e.preventDefault();\n    var data = {\n      itemname: productName,\n      itemcode: productCode,\n      count: stockCount\n    };\n    setModalData(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        isLoading: true\n      });\n    });\n    dispatch(productStoreAction.dataNotChanged());\n    API.post(\"add-product\", data).then(function (response) {\n      var msg = response.data.data.msg;\n      var type = response.data.data.type;\n      dispatch(productStoreAction.dataChanged());\n\n      if (type === \"success\") {\n        setModalData(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            isLoading: false,\n            alertText: msg,\n            alertType: \"success\"\n          });\n        });\n      } else {\n        setModalData(function (prevState) {\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            isLoading: false,\n            alertText: msg,\n            alertType: \"danger\"\n          });\n        });\n      }\n\n      productNameRestHandler(\"\");\n      productCodeRestHandler(\"\");\n      stockCountRestHandler(\"\");\n    }).catch(function (error) {\n      console.log(error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CModal, {\n    onShow: state.openModal,\n    onClose: modalCloseHandler,\n    heading: \"Add a Product\",\n    variant: \"primary\",\n    action: \"Add Product\",\n    size: \"md\",\n    onSubmitHandler: onSubmitHandler,\n    loading: modalData.isLoading,\n    children: [trackType, modalData.alertText && /*#__PURE__*/_jsxDEV(Alert, {\n      variant: modalData.alertType,\n      children: modalData.alertText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-4 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(FormRadio, {\n          inline: true,\n          label: \"Create Single Product\",\n          type: \"radio\",\n          value: \"singleProduct\",\n          name: \"inLineProduct\",\n          change: onTrackTypeChange,\n          checked: trackType === \"singleProduct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(FormRadio, {\n          inline: true,\n          label: \"Create Multiple Products()\",\n          type: \"radio\",\n          value: \"multipleProducts\",\n          name: \"inLineProduct\",\n          change: onTrackTypeChange,\n          checked: trackType === \"multipleProducts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, _this), trackType === \"singleProduct\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        readOnly: false,\n        label: \"Product Name\",\n        value: productName,\n        change: productNameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"text\",\n        readOnly: false,\n        label: \"Product Code\",\n        value: productCode,\n        change: productCodeChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, _this), /*#__PURE__*/_jsxDEV(FormInput, {\n        type: \"number\",\n        readOnly: false,\n        label: \"Stock Count\",\n        value: stockCount,\n        change: stockCountChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true), trackType === \"multipleProducts\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FormInputLabel, {\n        type: \"file\",\n        readOnly: false,\n        label: \"UpLoad CSV File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CreateModal, \"RUiGrz5WuhNGbLC53MkLvTZbfKw=\", false, function () {\n  return [useFormValidate, useFormValidate, useFormValidate, useSelector, useDispatch];\n});\n\n_c = CreateModal;\nexport default CreateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateModal\");","map":{"version":3,"sources":["C:/xampp/htdocs/nkItService/relax-frontend/src/Components/views/Product/CreateModal.js"],"names":["useState","useSelector","useDispatch","API","FormInput","CModal","useFormValidate","productStoreAction","Alert","Col","Row","FormRadio","FormInputLabel","CreateModal","productName","inputValue","productNameChangeHandler","inputChangeHandler","productNameRestHandler","reset","productCode","productCodeChangeHandler","productCodeRestHandler","stockCount","stockCountChangeHandler","stockCountRestHandler","trackType","setTrackType","onTrackTypeChange","e","target","value","isLoading","alertText","alertType","modalData","setModalData","mapStateToProps","state","openModal","productStore","dispatch","modalCloseHandler","addProductModal","data","onSubmitHandler","preventDefault","itemname","itemcode","count","prevState","dataNotChanged","post","then","response","msg","type","dataChanged","catch","error","console","log","message"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport API from \"src/axios/axios\";\r\nimport { FormInput } from \"src/Components/UI/Input/FormInput\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport { productStoreAction } from \"src/store/store\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport FormRadio from \"src/Components/UI/Input/FormRadio\";\r\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\r\nconst CreateModal = () => {\r\n  const {\r\n    inputValue: productName,\r\n    inputChangeHandler: productNameChangeHandler,\r\n    reset: productNameRestHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: productCode,\r\n    inputChangeHandler: productCodeChangeHandler,\r\n    reset: productCodeRestHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: stockCount,\r\n    inputChangeHandler: stockCountChangeHandler,\r\n    reset: stockCountRestHandler,\r\n  } = useFormValidate();\r\n\r\n  const [trackType, setTrackType] = useState(\"singleProduct\");\r\n  const onTrackTypeChange = (e) => {\r\n    setTrackType(e.target.value);\r\n  };\r\n  const [modalData, setModalData] = useState({\r\n    isLoading: false,\r\n    alertText: \"\",\r\n    alertType: \"\",\r\n  });\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      openModal: state.productStore.openModal,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  const modalCloseHandler = () => {\r\n    dispatch(productStoreAction.addProductModal({ data: false }));\r\n  };\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      itemname: productName,\r\n      itemcode: productCode,\r\n      count: stockCount,\r\n    };\r\n    setModalData((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        isLoading: true,\r\n      };\r\n    });\r\n    dispatch(productStoreAction.dataNotChanged());\r\n    API.post(\"add-product\", data)\r\n      .then((response) => {\r\n        const msg = response.data.data.msg;\r\n        const type = response.data.data.type;\r\n        dispatch(productStoreAction.dataChanged());\r\n        if (type === \"success\") {\r\n          setModalData((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              isLoading: false,\r\n              alertText: msg,\r\n              alertType: \"success\",\r\n            };\r\n          });\r\n        } else {\r\n          setModalData((prevState) => {\r\n            return {\r\n              ...prevState,\r\n              isLoading: false,\r\n              alertText: msg,\r\n              alertType: \"danger\",\r\n            };\r\n          });\r\n        }\r\n        productNameRestHandler(\"\");\r\n        productCodeRestHandler(\"\");\r\n        stockCountRestHandler(\"\");\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.message);\r\n      });\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.openModal}\r\n      onClose={modalCloseHandler}\r\n      heading={\"Add a Product\"}\r\n      variant={\"primary\"}\r\n      action={\"Add Product\"}\r\n      size=\"md\"\r\n      onSubmitHandler={onSubmitHandler}\r\n      loading={modalData.isLoading}\r\n    >\r\n      {trackType}\r\n      {modalData.alertText && (\r\n        <Alert variant={modalData.alertType}>{modalData.alertText}</Alert>\r\n      )}\r\n      <Row className=\"mt-4 mb-4\">\r\n        <Col sm={12} md={5}>\r\n          <FormRadio\r\n            inline={true}\r\n            label=\"Create Single Product\"\r\n            type=\"radio\"\r\n            value=\"singleProduct\"\r\n            name=\"inLineProduct\"\r\n            change={onTrackTypeChange}\r\n            checked={trackType === \"singleProduct\"}\r\n          />\r\n        </Col>\r\n        <Col sm={12} md={6}>\r\n          <FormRadio\r\n            inline={true}\r\n            label=\"Create Multiple Products()\"\r\n            type=\"radio\"\r\n            value=\"multipleProducts\"\r\n            name=\"inLineProduct\"\r\n            change={onTrackTypeChange}\r\n            checked={trackType === \"multipleProducts\"}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      {trackType === \"singleProduct\" && (\r\n        <>\r\n          <FormInput\r\n            type=\"text\"\r\n            readOnly={false}\r\n            label=\"Product Name\"\r\n            value={productName}\r\n            change={productNameChangeHandler}\r\n          />\r\n          <FormInput\r\n            type=\"text\"\r\n            readOnly={false}\r\n            label=\"Product Code\"\r\n            value={productCode}\r\n            change={productCodeChangeHandler}\r\n          />\r\n          <FormInput\r\n            type=\"number\"\r\n            readOnly={false}\r\n            label=\"Stock Count\"\r\n            value={stockCount}\r\n            change={stockCountChangeHandler}\r\n          />\r\n        </>\r\n      )}\r\n      {trackType === \"multipleProducts\" && (\r\n        <>\r\n          <FormInputLabel\r\n            type=\"file\"\r\n            readOnly={false}\r\n            label=\"UpLoad CSV File\"\r\n          />\r\n        </>\r\n      )}\r\n    </CModal>\r\n  );\r\n};\r\nexport default CreateModal;\r\n"]},"metadata":{},"sourceType":"module"}