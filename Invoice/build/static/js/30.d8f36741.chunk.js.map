{"version":3,"sources":["Components/UI/Spinner/CButtonSpinner.js","Components/UI/Button/Button.js","custom-functions.js","Components/UI/Table/Pagination.js","Components/UI/Alert/CAlert.js","Components/UI/Modal/CModal.js","Components/UI/Table/CTable.js","Components/UI/Badge/CBadge.js","Components/views/Comments/Table/CTableBody.js","Components/views/Comments/Model/CContentModal.js","Components/views/Comments/Model/CStatusModal.js","Components/views/Comments/Comment.js"],"names":["CButtonSpinner","Spinner","as","animation","size","role","CButton","props","control","Button","variant","color","onClick","click","input","index","type","style","minWidth","width","block","disabled","loading","name","getDate","value","date","Date","getYear","getFullYear","getMonth","getDay","toString","padStart","Pagination","to","body","total","links","pageChangeHandler","url","change","className","map","link","i","active","bind","length","label","React","memo","CAlert","class","text","CModal","show","onShow","onHide","onClose","backdrop","keyboard","onSubmit","onSubmitHandler","Header","closeButton","Title","heading","Body","children","Footer","showButton","action","CTable","header","th","responsive","striped","bordered","hover","CBadge","fontSize","CTableBody","dispatch","useDispatch","row","id","title","showCommentContent","content","created_at","getStatus","status","getCommentStatus","commentStoreAction","openCommentContent","onCommentChangeHandler","data","openCommentModal","CContentModal","state","useSelector","commentStore","showContentModel","isModalOpen","ModalHeading","closeCommentContent","CStatusModel","commentModal","modalHeading","modalAction","closeCommentModal","e","preventDefault","changeCommentStatus","isLoading","isDataUpdated","modalBody","Comment","tableData","reRun","reRunComponent","useEffect","isDataChanged","param","queryParam","getCommentData","isDataLoaded","Loader","split","updateParam"],"mappings":"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","file":"static/js/30.d8f36741.chunk.js","sourcesContent":["import { Spinner } from \"react-bootstrap\";\r\nconst CButtonSpinner = () => {\r\n  return (\r\n    <>\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"grow\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CButtonSpinner;\r\n","import { Button } from \"react-bootstrap\";\r\nimport CButtonSpinner from \"../Spinner/CButtonSpinner\";\r\nconst CButton = (props) => {\r\n  return (\r\n    <>\r\n      {props.control ? (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={() => props.click(props.input, props.index)}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n          input={props.input}\r\n        >\r\n          {props.loading && <CButtonSpinner />} {props.name}\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={props.click}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n        >\r\n          {props.loading ? <CButtonSpinner /> : props.name}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CButton;\r\n","export const getDate = (value) => {\r\n  if (!value) {\r\n    return \"\";\r\n  }\r\n  const date = new Date(value);\r\n  const getYear = date.getFullYear();\r\n  const getMonth = date.getMonth() + 1;\r\n  const getDay = date.getDate();\r\n\r\n  const constructDate = `${getYear}-${getMonth\r\n    .toString()\r\n    .padStart(2, \"0\")}-${getDay.toString().padStart(2, \"0\")}`;\r\n  return constructDate;\r\n};\r\n","import React from \"react\";\r\nconst Pagination = (props) => {\r\n  // console.log(\"body\", props.body);\r\n  const to = props.body?.to;\r\n  const total = props.body?.total;\r\n  const links = props.body?.links;\r\n\r\n  const pageChangeHandler = (url) => {\r\n    props.change(url);\r\n  };\r\n  return (\r\n    <nav className=\"d-flex justify-content-end\">\r\n      <div className=\"align-self-center mr-3 font-weight-bold\">\r\n        <span>{`${to} of ${total}`}</span>\r\n      </div>\r\n      <ul className=\"pagination\">\r\n        {links &&\r\n          links.map((link, i) => {\r\n            return (\r\n              <li key={i} className={`page-item ${link.active && \"active\"}`}>\r\n                {i === 0 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    &laquo;\r\n                  </span>\r\n                )}\r\n                {i === links.length - 1 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    &raquo;\r\n                  </span>\r\n                )}\r\n                {i !== 0 && i !== links.length - 1 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    {link.label}\r\n                  </span>\r\n                )}\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default React.memo(Pagination);\r\n","import { Alert } from \"react-bootstrap\";\r\nconst CAlert = (props) => {\r\n  return (\r\n    <Alert variant={props.color}>\r\n      <div className={props.class}>{props.text}</div>\r\n    </Alert>\r\n  );\r\n};\r\nexport default CAlert;\r\n","import { Form, Button, Modal, Spinner } from \"react-bootstrap\";\r\n\r\nconst CModal = (props) => {\r\n  return (\r\n    <Modal\r\n      show={props.onShow}\r\n      onHide={props.onClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n      size={props.size}\r\n    >\r\n      <Form onSubmit={props.onSubmitHandler}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{props.heading}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.children}</Modal.Body>\r\n        <Modal.Footer>\r\n          {props.showButton && (\r\n            <Button\r\n              variant={props.variant}\r\n              type=\"submit\"\r\n              style={{ width: props.width }}\r\n            >\r\n              {props.loading && (\r\n                <Spinner\r\n                  as=\"span\"\r\n                  animation=\"grow\"\r\n                  size=\"sm\"\r\n                  role=\"status\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              )}\r\n              {!props.loading && props.action}\r\n            </Button>\r\n          )}\r\n\r\n          <Button variant=\"secondary\" onClick={props.onClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nexport default CModal;\r\n","import Table from \"react-bootstrap/Table\";\r\nconst CTable = (props) => {\r\n  const Header = props.header.map((th, i) => {\r\n    return <th key={i}>{th}</th>;\r\n  });\r\n  return (\r\n    <>\r\n      <Table responsive=\"md\" striped bordered hover>\r\n        <thead className=\"thead-light\">\r\n          <tr>{Header}</tr>\r\n        </thead>\r\n        <tbody>{props.children}</tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\nexport default CTable;\r\n","import { Badge } from \"react-bootstrap\";\r\nconst CBadge = (props) => {\r\n  return (\r\n    <Badge\r\n      variant={props.color}\r\n      style={{ fontSize: props.size }}\r\n      onClick={props.click}\r\n    >\r\n      {props.value}\r\n    </Badge>\r\n  );\r\n};\r\nexport default CBadge;\r\n","import CBadge from \"src/Components/UI/Badge/CBadge\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\nimport { getDate } from \"src/custom-functions\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { commentStoreAction } from \"src/store/store\";\r\nconst CTableBody = (props) => {\r\n  const body = props.body;\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      {body.map((row, i) => {\r\n        return (\r\n          <tr key={i}>\r\n            <td>{row.id}</td>\r\n            <td>{row.name}</td>\r\n            <td>{row.title}</td>\r\n            <td>{showCommentContent(row.content, dispatch)}</td>\r\n            <td>{row.content}</td>\r\n            <td>{getDate(row.created_at)}</td>\r\n            <td>{getStatus(row.status)}</td>\r\n            <td>{getCommentStatus(row.status, row.id, dispatch)}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\nexport default CTableBody;\r\nconst getStatus = (value) => {\r\n  switch (value) {\r\n    case \"approve\":\r\n      return <CBadge color=\"success\" value=\"Approved\" size=\"100%\" />;\r\n    case \"disapprove\":\r\n      return <CBadge color=\"danger\" value=\"Disabled\" size=\"100%\" />;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nconst showCommentContent = (content, dispatch) => {\r\n  const onOpenContentModal = (content, dispatch) => {\r\n    dispatch(\r\n      commentStoreAction.openCommentContent({\r\n        content,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <CButton\r\n      color={\"primary\"}\r\n      name={\"View\"}\r\n      type=\"button\"\r\n      size=\"20%\"\r\n      click={onOpenContentModal.bind(null, content, dispatch)}\r\n    />\r\n  );\r\n};\r\n\r\nconst getCommentStatus = (value, id, dispatch) => {\r\n  const onCommentChangeHandler = (id, action, dispatch) => {\r\n    let data;\r\n    if (action === \"Disable\") {\r\n      data = {\r\n        id,\r\n        action,\r\n        heading: \"Disable the Comment\",\r\n        color: \"danger\",\r\n        body: \"Please confirm that you are going to disable this Comment?\",\r\n      };\r\n    } else {\r\n      data = {\r\n        id,\r\n        action,\r\n        heading: \"Aprrove the Comment\",\r\n        color: \"success\",\r\n        body: \"Please confirm that you are going to Approve this Comment?\",\r\n      };\r\n    }\r\n\r\n    dispatch(commentStoreAction.openCommentModal(data));\r\n  };\r\n\r\n  switch (value) {\r\n    case \"approve\":\r\n      return (\r\n        <CButton\r\n          color={\"danger\"}\r\n          name={\"Disable\"}\r\n          type=\"button\"\r\n          size=\"20%\"\r\n          click={onCommentChangeHandler.bind(null, id, \"Disable\", dispatch)}\r\n        />\r\n      );\r\n    case \"disapprove\":\r\n      return (\r\n        <CButton\r\n          color={\"success\"}\r\n          name={\"Approve\"}\r\n          type=\"button\"\r\n          size=\"20%\"\r\n          click={onCommentChangeHandler.bind(null, id, \"Approve\", dispatch)}\r\n        />\r\n      );\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport { commentStoreAction } from \"src/store/store\";\r\nconst CContentModal = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.commentStore.showContentModel,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n\r\n  const closeModalHandler = () => {\r\n    dispatch(commentStoreAction.closeCommentContent());\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.data.isModalOpen}\r\n      size=\"md\"\r\n      heading={state.data.ModalHeading}\r\n      action={false}\r\n      onClose={closeModalHandler}\r\n    >\r\n      <p className=\"font-italic font-weight-bolder\">{state.data.content}</p>\r\n    </CModal>\r\n  );\r\n};\r\nexport default CContentModal;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport CAlert from \"src/Components/UI/Alert/CAlert\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport { changeCommentStatus } from \"src/store/comment-slice\";\r\nimport { commentStoreAction } from \"src/store/store\";\r\nconst CStatusModel = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.commentStore.commentModal,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n\r\n  const modalCloseHandler = () => {\r\n    dispatch(commentStoreAction.closeCommentModal());\r\n  };\r\n\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      id: state.data.id,\r\n      action: state.data.modalAction,\r\n    };\r\n    dispatch(changeCommentStatus(data));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <CModal\r\n        onShow={state.data.isModalOpen}\r\n        heading={state.data.modalHeading}\r\n        variant={state.data.color}\r\n        action={state.data.modalAction}\r\n        onClose={modalCloseHandler}\r\n        onSubmitHandler={onSubmitHandler}\r\n        size=\"md\"\r\n        loading={state.data.isLoading}\r\n        width=\"20%\"\r\n        showButton={state.data.isDataUpdated ? false : true}\r\n      >\r\n        <CAlert color={state.data.color} text={state.data.modalBody} />\r\n      </CModal>\r\n    </>\r\n  );\r\n};\r\nexport default CStatusModel;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Loader from \"src/Components/UI/Loader/Loader\";\r\nimport CTable from \"src/Components/UI/Table/CTable\";\r\nimport Pagination from \"src/Components/UI/Table/Pagination\";\r\nimport { getCommentData } from \"src/store/comment-slice\";\r\nimport { commentStoreAction } from \"src/store/store\";\r\nimport CContentModal from \"./Model/CContentModal\";\r\nimport CStatusModel from \"./Model/CStatusModal\";\r\nimport CTableBody from \"./Table/CTableBody\";\r\nconst Comment = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.commentStore.tableData,\r\n      reRun: state.commentStore.reRunComponent,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (state.reRun.isDataChanged) {\r\n      const data = {\r\n        id: \"all\",\r\n        param: state.reRun.queryParam,\r\n      };\r\n      dispatch(getCommentData(data));\r\n    }\r\n  }, [state.reRun.isDataChanged, state.reRun.queryParam, dispatch]);\r\n  const pageChangeHandler = (url) => {\r\n    if (url) {\r\n      const param = url.split(\"?\")[1];\r\n      dispatch(commentStoreAction.updateParam({ param }));\r\n      const data = {\r\n        id: \"all\",\r\n        param,\r\n      };\r\n      dispatch(getCommentData(data));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <CStatusModel />\r\n      <CContentModal />\r\n      {!state.data.isDataLoaded && <Loader />}\r\n      {state.data.isDataLoaded && (\r\n        <>\r\n          <CTable\r\n            header={[\r\n              \"#\",\r\n              \"Author\",\r\n              \"Post Title\",\r\n              \"Post Content\",\r\n              \"Comment\",\r\n              \"Date Created\",\r\n              \"Status\",\r\n              \"Action\",\r\n            ]}\r\n          >\r\n            <CTableBody body={state.data.data.data} />\r\n          </CTable>\r\n          <Pagination body={state.data.data} change={pageChangeHandler} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Comment;\r\n"],"sourceRoot":""}