{"version":3,"sources":["Components/UI/Spinner/CButtonSpinner.js","Components/UI/Button/Button.js","custom-functions.js","Components/UI/Table/Pagination.js","Components/UI/Alert/CAlert.js","Hooks/input-validation.js","Components/UI/Input/FormInputLabel.js","Components/UI/Modal/CModal.js","Components/UI/Table/CTable.js","Components/UI/Input/FormSelect.js","Components/UI/Icon/Icon.js","Components/UI/ActionButton/ActionButton.js","Components/UI/Badge/CBadge.js","../node_modules/react-bootstrap/esm/Badge.js","Components/views/Users/AllUsers/AllUsers.module.css","Components/views/Users/Modal/ContactDetailModal.js","Components/views/Users/Modal/JobDetailModal.js","Components/views/Users/Modal/UserEditModal.js","Components/views/Users/AllUsers/UserTableBody.js","Components/views/Users/AllUsers/AllUsers.js"],"names":["CButtonSpinner","Spinner","as","animation","size","role","CButton","props","control","Button","variant","color","onClick","click","input","index","type","style","minWidth","width","block","disabled","loading","name","getDate","value","date","Date","getYear","getFullYear","getMonth","getDay","toString","padStart","Pagination","to","body","total","links","pageChangeHandler","url","change","className","map","link","i","active","bind","length","label","React","memo","CAlert","class","text","useFormValidate","useState","inputValue","setInputValue","inputIsTouched","setInputIsTouched","inputChangeHandler","event","target","inputBlurHandler","reset","FormInputLabel","md","sm","Group","Label","Control","readOnly","onChange","onBlur","blur","list","placeholder","placeHolder","CModal","show","onShow","onHide","onClose","backdrop","keyboard","onSubmit","onSubmitHandler","Header","closeButton","Title","heading","Body","children","Footer","showButton","action","CTable","header","th","responsive","striped","bordered","hover","FormSelect","htmlFor","id","chooseOption","options","option","toLowerCase","Icon","ActionButton","ToolTip","CBadge","fontSize","_excluded","Badge","forwardRef","_ref","ref","bsPrefix","pill","_ref$as","Component","_objectWithoutPropertiesLoose","prefix","useBootstrapPrefix","createElement","_extends","classNames","displayName","defaultProps","module","exports","ContactDetailModal","state","useSelector","data","userStore","addressModal","dispatch","useDispatch","phone","setPhone","phoneChangeHandler","city","setCity","cityChangeHandler","zip","setZip","zipChangeHandler","country","setCountry","countryChangeHandler","useEffect","isDataChanged","details","postal_code","isModalOpen","userStoreAction","closeAddressModal","JobDetailModal","jobId","setJobId","jobIdChangeHandler","jobIdBlurHandler","title","setTitle","titleChangeHandler","titleBlurHandler","setDate","dateChangeHandler","dateBlurHandler","setType","typeChangeHandler","typeBlurHandler","jobModal","joinedDate","jobType","isLoading","closeJobModal","e","preventDefault","empId","split","user_id","emp_number","job_title","job_started_date","job_type","updateJobModalData","isDataUpdated","msg","UserEditModal","onRoleChange","setRole","userModalData","updateUserData","actionType","userRole","modalHeading","modalAction","userId","editUserRole","currentStatus","userStatus","disableUser","closeUserModal","UserTableBody","history","useHistory","onJobViewHandler","jobs","jobData","emp_type","toUpperCase","openJobModal","onContactViewHandler","address","openAddressModal","row","email","getRoles","roles","getCount","posts_count","comments_count","likes_count","getStatus","status","classes","view","getUserModalData","assignRoleHandler","delete","updateUserId","push","commentStoreAction","updateFilterComment","AllUsers","isUserDataLoaded","userData","reRunComponent","param","queryParam","getUserData","Loader","updateParam"],"mappings":"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","file":"static/js/14.b6428124.chunk.js","sourcesContent":["import { Spinner } from \"react-bootstrap\";\r\nconst CButtonSpinner = () => {\r\n  return (\r\n    <>\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"grow\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CButtonSpinner;\r\n","import { Button } from \"react-bootstrap\";\r\nimport CButtonSpinner from \"../Spinner/CButtonSpinner\";\r\nconst CButton = (props) => {\r\n  return (\r\n    <>\r\n      {props.control ? (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={() => props.click(props.input, props.index)}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n          input={props.input}\r\n        >\r\n          {props.loading && <CButtonSpinner />} {props.name}\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={props.click}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n        >\r\n          {props.loading ? <CButtonSpinner /> : props.name}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CButton;\r\n","export const getDate = (value) => {\r\n  if (!value) {\r\n    return \"\";\r\n  }\r\n  const date = new Date(value);\r\n  const getYear = date.getFullYear();\r\n  const getMonth = date.getMonth() + 1;\r\n  const getDay = date.getDate();\r\n\r\n  const constructDate = `${getYear}-${getMonth\r\n    .toString()\r\n    .padStart(2, \"0\")}-${getDay.toString().padStart(2, \"0\")}`;\r\n  return constructDate;\r\n};\r\n","import React from \"react\";\r\nconst Pagination = (props) => {\r\n  // console.log(\"body\", props.body);\r\n  const to = props.body?.to;\r\n  const total = props.body?.total;\r\n  const links = props.body?.links;\r\n\r\n  const pageChangeHandler = (url) => {\r\n    props.change(url);\r\n  };\r\n  return (\r\n    <nav className=\"d-flex justify-content-end\">\r\n      <div className=\"align-self-center mr-3 font-weight-bold\">\r\n        <span>{`${to} of ${total}`}</span>\r\n      </div>\r\n      <ul className=\"pagination\">\r\n        {links &&\r\n          links.map((link, i) => {\r\n            return (\r\n              <li key={i} className={`page-item ${link.active && \"active\"}`}>\r\n                {i === 0 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    &laquo;\r\n                  </span>\r\n                )}\r\n                {i === links.length - 1 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    &raquo;\r\n                  </span>\r\n                )}\r\n                {i !== 0 && i !== links.length - 1 && (\r\n                  <span\r\n                    className=\"page-link\"\r\n                    onClick={pageChangeHandler.bind(null, link.url)}\r\n                  >\r\n                    {link.label}\r\n                  </span>\r\n                )}\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default React.memo(Pagination);\r\n","import { Alert } from \"react-bootstrap\";\r\nconst CAlert = (props) => {\r\n  return (\r\n    <Alert variant={props.color}>\r\n      <div className={props.class}>{props.text}</div>\r\n    </Alert>\r\n  );\r\n};\r\nexport default CAlert;\r\n","import { useState } from \"react\";\r\nconst useFormValidate = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [inputIsTouched, setInputIsTouched] = useState(false);\r\n\r\n  const inputChangeHandler = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n  const inputBlurHandler = (event) => {\r\n    setInputIsTouched(true);\r\n  };\r\n\r\n  const reset = () => {\r\n    setInputValue(\"\");\r\n    setInputIsTouched(false);\r\n  };\r\n\r\n  return {\r\n    inputValue,\r\n    setInputValue,\r\n    inputIsTouched,\r\n    inputChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\nexport default useFormValidate;\r\n","import { Col, Form } from \"react-bootstrap\";\r\nexport const FormInputLabel = (props) => {\r\n  return (\r\n    <Col md={props.md} sm={props.sm}>\r\n      <Form.Group>\r\n        {props.label && <Form.Label>{props.label}</Form.Label>}\r\n        <Form.Control\r\n          type={props.type}\r\n          readOnly={props.readOnly}\r\n          onChange={props.change}\r\n          value={props.value}\r\n          onBlur={props.blur}\r\n          list={props.list}\r\n          placeholder={props.placeHolder}\r\n        />\r\n      </Form.Group>\r\n    </Col>\r\n  );\r\n};\r\nexport default FormInputLabel;\r\n","import { Form, Button, Modal, Spinner } from \"react-bootstrap\";\r\n\r\nconst CModal = (props) => {\r\n  return (\r\n    <Modal\r\n      show={props.onShow}\r\n      onHide={props.onClose}\r\n      backdrop=\"static\"\r\n      keyboard={false}\r\n      size={props.size}\r\n    >\r\n      <Form onSubmit={props.onSubmitHandler}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{props.heading}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{props.children}</Modal.Body>\r\n        <Modal.Footer>\r\n          {props.showButton && (\r\n            <Button\r\n              variant={props.variant}\r\n              type=\"submit\"\r\n              style={{ width: props.width }}\r\n            >\r\n              {props.loading && (\r\n                <Spinner\r\n                  as=\"span\"\r\n                  animation=\"grow\"\r\n                  size=\"sm\"\r\n                  role=\"status\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              )}\r\n              {!props.loading && props.action}\r\n            </Button>\r\n          )}\r\n\r\n          <Button variant=\"secondary\" onClick={props.onClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nexport default CModal;\r\n","import Table from \"react-bootstrap/Table\";\r\nconst CTable = (props) => {\r\n  const Header = props.header.map((th, i) => {\r\n    return <th key={i}>{th}</th>;\r\n  });\r\n  return (\r\n    <>\r\n      <Table responsive=\"md\" striped bordered hover>\r\n        <thead className=\"thead-light\">\r\n          <tr>{Header}</tr>\r\n        </thead>\r\n        <tbody>{props.children}</tbody>\r\n      </Table>\r\n    </>\r\n  );\r\n};\r\nexport default CTable;\r\n","import { CCol } from \"@coreui/react\";\r\n\r\nconst FormSelect = (props) => {\r\n  return (\r\n    <CCol sm={12}>\r\n      <div className=\"form-group\">\r\n        {props.label && (\r\n          <label htmlFor={props.id} style={{ color: \"black\" }}>\r\n            {props.label}\r\n          </label>\r\n        )}\r\n        <select\r\n          className=\"form-control\"\r\n          id={props.id}\r\n          value={props.value}\r\n          onChange={props.change}\r\n          disabled={props.readOnly && \"readOnly\"}\r\n        >\r\n          {props.chooseOption && <option>Choose One Option</option>}\r\n          {props.options.map((option, index) => {\r\n            return (\r\n              <option key={index} value={option.toLowerCase()}>\r\n                {option}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n    </CCol>\r\n  );\r\n};\r\nexport default FormSelect;\r\n","import CIcon from \"@coreui/icons-react\";\r\nconst Icon = (props) => {\r\n  return (\r\n    <>\r\n      <CIcon\r\n        name={props.name}\r\n        size=\"2xl\"\r\n        className={props.class}\r\n        onClick={props.action}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Icon;\r\n","import ToolTip from \"src/Components/UI/Tooltip/ToolTip\";\r\nimport Icon from \"src/Components/UI/Icon/Icon\";\r\nconst ActionButton = (props) => {\r\n  return (\r\n    <ToolTip value={props.value}>\r\n      <Icon class={props.class} name={props.name} action={props.action} />\r\n    </ToolTip>\r\n  );\r\n};\r\nexport default ActionButton;\r\n","import { Badge } from \"react-bootstrap\";\r\nconst CBadge = (props) => {\r\n  return (\r\n    <Badge\r\n      variant={props.color}\r\n      style={{ fontSize: props.size }}\r\n      onClick={props.click}\r\n    >\r\n      {props.value}\r\n    </Badge>\r\n  );\r\n};\r\nexport default CBadge;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"delete\":\"AllUsers_delete__1JT0B\",\"view\":\"AllUsers_view__2U4xi\"};","import CModal from \"src/Components/UI/Modal/CModal\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\r\nimport { userStoreAction } from \"src/store/store\";\r\nconst ContactDetailModal = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.userStore.addressModal,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  const {\r\n    inputValue: phone,\r\n    setInputValue: setPhone,\r\n    inputChangeHandler: phoneChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: city,\r\n    setInputValue: setCity,\r\n    inputChangeHandler: cityChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: zip,\r\n    setInputValue: setZip,\r\n    inputChangeHandler: zipChangeHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: country,\r\n    setInputValue: setCountry,\r\n    inputChangeHandler: countryChangeHandler,\r\n  } = useFormValidate();\r\n  useEffect(() => {\r\n    if (state.data.isDataChanged) {\r\n      setPhone(state.data.details.phone);\r\n      setCity(state.data.details.city);\r\n      setZip(state.data.details.postal_code);\r\n      setCountry(state.data.details.country);\r\n    }\r\n  }, [setPhone, setCity, setZip, setCountry, state.data]);\r\n  const onModalCloseHandler = () => {\r\n    dispatch(userStoreAction.closeAddressModal());\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.data.isModalOpen}\r\n      heading=\"View the Contact Details\"\r\n      variant=\"primary\"\r\n      action={false}\r\n      loading={false}\r\n      onClose={onModalCloseHandler}\r\n      width=\"20%\"\r\n    >\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={true}\r\n        label=\"Phone Number\"\r\n        value={phone}\r\n        change={phoneChangeHandler}\r\n      />\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={true}\r\n        label=\"City\"\r\n        value={city}\r\n        change={cityChangeHandler}\r\n      />\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={true}\r\n        label=\"Postal Code\"\r\n        value={zip}\r\n        change={zipChangeHandler}\r\n      />\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={true}\r\n        label=\"Country\"\r\n        value={country}\r\n        change={countryChangeHandler}\r\n      />\r\n    </CModal>\r\n  );\r\n};\r\nexport default ContactDetailModal;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CAlert from \"src/Components/UI/Alert/CAlert\";\r\nimport FormInputLabel from \"src/Components/UI/Input/FormInputLabel\";\r\nimport FormSelect from \"src/Components/UI/Input/FormSelect\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport { getDate } from \"src/custom-functions\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport { userStoreAction } from \"src/store/store\";\r\nimport { updateJobModalData } from \"src/store/user-slice\";\r\nconst JobDetailModal = () => {\r\n  const {\r\n    inputValue: jobId,\r\n    setInputValue: setJobId,\r\n    inputChangeHandler: jobIdChangeHandler,\r\n    inputBlurHandler: jobIdBlurHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: title,\r\n    setInputValue: setTitle,\r\n    inputChangeHandler: titleChangeHandler,\r\n    inputBlurHandler: titleBlurHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: date,\r\n    setInputValue: setDate,\r\n    inputChangeHandler: dateChangeHandler,\r\n    inputBlurHandler: dateBlurHandler,\r\n  } = useFormValidate();\r\n  const {\r\n    inputValue: type,\r\n    setInputValue: setType,\r\n    inputChangeHandler: typeChangeHandler,\r\n    inputBlurHandler: typeBlurHandler,\r\n  } = useFormValidate();\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      data: state.userStore.jobModal,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (state.data.details) {\r\n      setTitle(state.data.details.title);\r\n      setDate(state.data.details.joinedDate);\r\n      setType(state.data.details.jobType);\r\n      setJobId(state.data.details.jobId);\r\n    }\r\n  }, [setTitle, setDate, setType, setJobId, state.data]);\r\n  const onModalCloseHandler = () => {\r\n    dispatch(userStoreAction.closeJobModal());\r\n  };\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    const empId = jobId.split(\"-\")[1];\r\n    const data = {\r\n      user_id: state.data.id,\r\n      emp_number: empId,\r\n      job_title: title,\r\n      job_started_date: date,\r\n      job_type: type,\r\n    };\r\n\r\n    dispatch(updateJobModalData(data));\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.data.isModalOpen}\r\n      heading=\"View/Update the job Details\"\r\n      variant=\"primary\"\r\n      action=\"Update\"\r\n      loading={state.data.isLoading}\r\n      onClose={onModalCloseHandler}\r\n      onSubmitHandler={onSubmitHandler}\r\n      width=\"20%\"\r\n      showButton={true}\r\n    >\r\n      {state.data.isDataUpdated && (\r\n        <CAlert color={state.data.color} text={state.data.msg} />\r\n      )}\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={false}\r\n        label=\"Employee ID\"\r\n        value={jobId}\r\n        change={jobIdChangeHandler}\r\n        blur={jobIdBlurHandler}\r\n      />\r\n      <FormInputLabel\r\n        type=\"text\"\r\n        readOnly={false}\r\n        label=\"Job Title\"\r\n        value={title}\r\n        change={titleChangeHandler}\r\n        blur={titleBlurHandler}\r\n      />\r\n      <FormInputLabel\r\n        type=\"date\"\r\n        readOnly={false}\r\n        label=\"Joined Date\"\r\n        value={date}\r\n        change={dateChangeHandler}\r\n        blur={dateBlurHandler}\r\n      />\r\n      <FormSelect\r\n        label=\"Job Type\"\r\n        value={type}\r\n        options={[\"Part-Time\", \"Full-Time\"]}\r\n        readOnly={false}\r\n        change={typeChangeHandler}\r\n        blur={typeBlurHandler}\r\n      />\r\n    </CModal>\r\n  );\r\n};\r\nexport default JobDetailModal;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport CAlert from \"src/Components/UI/Alert/CAlert\";\r\nimport FormSelect from \"src/Components/UI/Input/FormSelect\";\r\nimport CModal from \"src/Components/UI/Modal/CModal\";\r\nimport useFormValidate from \"src/Hooks/input-validation\";\r\nimport {\r\n  closeUserModal,\r\n  disableUser,\r\n  editUserRole,\r\n} from \"src/store/user-slice\";\r\nconst UserEditModal = () => {\r\n  const {\r\n    inputValue: role,\r\n    inputChangeHandler: onRoleChange,\r\n    setInputValue: setRole,\r\n  } = useFormValidate();\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      userModalData: state.userStore.userModalData,\r\n      updateUserData: state.userStore.updateUserData,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n  useEffect(() => {\r\n    if (state.userModalData.actionType === \"assign\") {\r\n      setRole(state.userModalData.userRole);\r\n    }\r\n  }, [state.userModalData, setRole]);\r\n  const dispatch = useDispatch();\r\n  const onSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (state.userModalData.actionType === \"assign\") {\r\n      const data = {\r\n        id: state.userModalData.userId,\r\n        role: role,\r\n      };\r\n      dispatch(editUserRole(data));\r\n    } else {\r\n      const data = {\r\n        id: state.userModalData.userId,\r\n        currentStatus: state.userModalData.userStatus,\r\n      };\r\n      dispatch(disableUser(data));\r\n    }\r\n  };\r\n\r\n  const modalCloseHandler = () => {\r\n    dispatch(closeUserModal());\r\n  };\r\n  return (\r\n    <CModal\r\n      onShow={state.userModalData.isModalOpen}\r\n      heading={state.userModalData.modalHeading}\r\n      variant={state.userModalData.variant}\r\n      action={state.userModalData.modalAction}\r\n      size=\"md\"\r\n      onSubmitHandler={onSubmitHandler}\r\n      loading={state.updateUserData.isLoading}\r\n      onClose={modalCloseHandler}\r\n      showButton={\r\n        state.updateUserData.isDataUpdated &&\r\n        state.userModalData.actionType !== \"assign\"\r\n          ? false\r\n          : true\r\n      }\r\n    >\r\n      {state.updateUserData.isDataUpdated && (\r\n        <CAlert\r\n          color={state.updateUserData.color}\r\n          text={state.updateUserData.msg}\r\n        />\r\n      )}\r\n      {state.userModalData.actionType === \"delete\" &&\r\n        !state.updateUserData.isDataUpdated && (\r\n          <CAlert\r\n            color=\"danger\"\r\n            text={`please confirm that you are going to this ${\r\n              state.userModalData.userStatus === \"1\" ? \"DISABLE\" : \"ENABLE\"\r\n            } User`}\r\n          />\r\n        )}\r\n      {state.userModalData.actionType === \"assign\" && (\r\n        <>\r\n          <FormSelect\r\n            label=\"User Roles\"\r\n            value={role}\r\n            change={onRoleChange}\r\n            options={[\"Admin\", \"User\"]}\r\n            readOnly={false}\r\n          />\r\n        </>\r\n      )}\r\n    </CModal>\r\n  );\r\n};\r\nexport default UserEditModal;\r\n","import ActionButton from \"src/Components/UI/ActionButton/ActionButton\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport classes from \"./AllUsers.module.css\";\r\nimport { getUserModalData } from \"src/store/user-slice\";\r\nimport ToolTip from \"src/Components/UI/Tooltip/ToolTip\";\r\nimport CBadge from \"src/Components/UI/Badge/CBadge\";\r\nimport { useHistory } from \"react-router\";\r\nimport { commentStoreAction, userStoreAction } from \"src/store/store\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\nimport { getDate } from \"src/custom-functions\";\r\nconst UserTableBody = (props) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const assignRoleHandler = (i) => {\r\n    const data = {\r\n      id: props.body[i].id,\r\n      userRole: props.body[i].roles,\r\n      userStatus: props.body[i].status,\r\n      action: \"assign\",\r\n    };\r\n    dispatch(getUserModalData(data));\r\n  };\r\n  const disableUser = (i) => {\r\n    const data = {\r\n      id: props.body[i].id,\r\n      userRole: props.body[i].status,\r\n      userStatus: props.body[i].status,\r\n      action: \"delete\",\r\n    };\r\n    dispatch(getUserModalData(data));\r\n  };\r\n\r\n  const onJobViewHandler = (i) => {\r\n    let data;\r\n    if (props.body[i].jobs) {\r\n      data = {\r\n        id: props.body[i].id,\r\n        jobData: {\r\n          jobId: `${props.body[i].jobs.emp_type.toUpperCase()}-${\r\n            props.body[i].jobs.emp_number\r\n          }`,\r\n          title: props.body[i].jobs.job_title,\r\n          joinedDate: getDate(props.body[i].jobs.job_started_date),\r\n          jobType: props.body[i].jobs.job_type,\r\n          action: \"update\",\r\n        },\r\n      };\r\n    } else {\r\n      data = {\r\n        id: props.body[i].id,\r\n        jobData: {\r\n          jobId: `EMP-`,\r\n          title: \"\",\r\n          joinedDate: getDate(new Date()),\r\n          jobType: \"part-time\",\r\n          action: \"create\",\r\n        },\r\n      };\r\n    }\r\n    dispatch(userStoreAction.openJobModal(data));\r\n  };\r\n\r\n  const onContactViewHandler = (i) => {\r\n    const data = {\r\n      phone: props.body[i].address?.phone\r\n        ? props.body[i].address.phone\r\n        : \"Not Provided Yet\",\r\n      city: props.body[i].address?.city\r\n        ? props.body[i].address.city\r\n        : \"Not Provided Yet\",\r\n      country: props.body[i].address?.country\r\n        ? props.body[i].address.country\r\n        : \"Not Provided Yet\",\r\n      postal_code: props.body[i].address?.postal_code\r\n        ? props.body[i].address.postal_code\r\n        : \"Not Provided Yet\",\r\n    };\r\n    dispatch(\r\n      userStoreAction.openAddressModal({\r\n        data,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {props.body.map((row, i) => {\r\n        return (\r\n          <tr key={i}>\r\n            <td>{row.id}</td>\r\n            <td>{row.name}</td>\r\n            <td>{row.email}</td>\r\n            <td>{getRoles(row.roles)}</td>\r\n            <td>\r\n              {getCount(\r\n                row.id,\r\n                row.posts_count,\r\n                history,\r\n                dispatch,\r\n                \"primary\",\r\n                \"post\"\r\n              )}\r\n            </td>\r\n            <td>\r\n              {getCount(\r\n                row.id,\r\n                row.comments_count,\r\n                history,\r\n                dispatch,\r\n                \"primary\",\r\n                \"comment\"\r\n              )}\r\n            </td>\r\n            <td>{row.likes_count}</td>\r\n            <td>{getStatus(row.status)}</td>\r\n            <td>\r\n              <CButton\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                name=\"View\"\r\n                click={onJobViewHandler.bind(null, i)}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CButton\r\n                color=\"primary\"\r\n                type=\"button\"\r\n                name=\"View\"\r\n                click={onContactViewHandler.bind(null, i)}\r\n              />\r\n            </td>\r\n            <td>\r\n              <ActionButton\r\n                value=\"Assign Roles\"\r\n                class={classes.view}\r\n                name=\"cil-align-center\"\r\n                action={() => assignRoleHandler(i)}\r\n              />{\" \"}\r\n              |{\" \"}\r\n              <ActionButton\r\n                value={row.status === \"1\" ? \"Disable\" : \"Enable\"}\r\n                class={classes.delete}\r\n                name=\"cil-trash\"\r\n                action={() => disableUser(i)}\r\n              />\r\n            </td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTableBody;\r\nconst getRoles = (value) => {\r\n  switch (value) {\r\n    case \"admin\":\r\n      return <CBadge color=\"success\" value=\"Admin\" size=\"100%\" />;\r\n    case \"user\":\r\n      return <CBadge color=\"warning\" value=\"User\" size=\"100%\" />;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n};\r\nconst getStatus = (value) => {\r\n  switch (value) {\r\n    case \"1\":\r\n      return <CBadge color=\"success\" value=\"Active\" size=\"100%\" />;\r\n    case \"0\":\r\n      return <CBadge color=\"danger\" value=\"Inactive\" size=\"100%\" />;\r\n\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\nconst getCount = (userId, value, history, dispatch, color, type) => {\r\n  const onSubmitHandler = (history, userId, dispatch, type) => {\r\n    if (type === \"post\") {\r\n      dispatch(userStoreAction.updateUserId({ userId }));\r\n      history.push(\"/admin/post-filter\");\r\n    } else if (type === \"comment\") {\r\n      dispatch(commentStoreAction.updateFilterComment({ userId }));\r\n      history.push(\"/admin/comment-filter\");\r\n    }\r\n  };\r\n  return (\r\n    <ToolTip value=\"Click Here\">\r\n      <CBadge\r\n        color={color}\r\n        value={value}\r\n        size=\"100%\"\r\n        click={onSubmitHandler.bind(null, history, userId, dispatch, type)}\r\n      />\r\n    </ToolTip>\r\n  );\r\n};\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport Loader from \"src/Components/UI/Loader/Loader\";\r\nimport CTable from \"src/Components/UI/Table/CTable\";\r\nimport Pagination from \"src/Components/UI/Table/Pagination\";\r\nimport { userStoreAction } from \"src/store/store\";\r\nimport { getUserData } from \"src/store/user-slice\";\r\nimport ContactDetailModal from \"../Modal/ContactDetailModal\";\r\nimport JobDetailModal from \"../Modal/JobDetailModal\";\r\nimport UserEditModal from \"../Modal/UserEditModal\";\r\nimport UserTableBody from \"./UserTableBody\";\r\nconst AllUsers = () => {\r\n  const mapStateToProps = (state) => {\r\n    return {\r\n      isUserDataLoaded: state.userStore.isUserDataLoaded,\r\n      userData: state.userStore.userData,\r\n      reRunComponent: state.userStore.reRunComponent,\r\n    };\r\n  };\r\n  const state = useSelector(mapStateToProps);\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (state.reRunComponent.isDataChanged) {\r\n      const data = {\r\n        param: state.reRunComponent.queryParam,\r\n      };\r\n      dispatch(getUserData(data));\r\n    }\r\n  }, [\r\n    state.reRunComponent.isDataChanged,\r\n    state.reRunComponent.queryParam,\r\n    dispatch,\r\n  ]);\r\n  const pageChangeHandler = (url) => {\r\n    if (url) {\r\n      const param = url.split(\"?\")[1];\r\n      dispatch(userStoreAction.updateParam({ param }));\r\n      const data = {\r\n        param,\r\n      };\r\n      dispatch(getUserData(param));\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <UserEditModal />\r\n      <JobDetailModal />\r\n      <ContactDetailModal />\r\n      {!state.isUserDataLoaded && <Loader />}\r\n      {state.isUserDataLoaded && (\r\n        <CTable\r\n          header={[\r\n            \"#\",\r\n            \"First Name\",\r\n            \"Email\",\r\n            \"Role\",\r\n            \"Posts\",\r\n            \"Comments\",\r\n            \"likes\",\r\n            \"Status\",\r\n            \"Job Details\",\r\n            \"Contact Details\",\r\n            \"Action\",\r\n          ]}\r\n        >\r\n          <UserTableBody body={state.userData.data} />\r\n        </CTable>\r\n      )}\r\n      {state.isUserDataLoaded && (\r\n        <Pagination body={state.userData} change={pageChangeHandler} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AllUsers;\r\n"],"sourceRoot":""}