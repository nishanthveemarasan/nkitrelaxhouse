{"version":3,"sources":["Components/UI/Spinner/CButtonSpinner.js","Components/UI/Button/Button.js","Components/UI/Input/FormTextArea.js","Components/views/Store/UI/validator/Validator.js","Components/views/Store/UI/Alert/Alert.js","Components/views/Store/UI/FormSelect.js","Components/views/Store/UI/FormInput.js","Components/views/Store/UI/SButtonGroup/SButtonGroup.js","Components/views/Store/UI/SFormTextArea.js","Components/views/Store/Store.module.css","Components/views/Store/Store.js"],"names":["CButtonSpinner","Spinner","as","animation","size","role","CButton","props","control","Button","variant","color","onClick","click","input","index","type","style","minWidth","width","block","disabled","loading","name","FormTextArea","className","labelName","readOnly","onChange","change","value","rows","children","required","trim","offer","test","decimal","SAlert","onClose","close","dismissible","msg","SFormSelect","label","htmlFor","id","e","chooseOption","options","map","option","toLowerCase","FormInput","md","sm","Group","Label","Control","onBlur","blur","list","placeholder","placeHolder","SButtonGroup","SFormTextArea","module","exports","Store","useState","setLoading","status","show","alert","setAlert","height","setChange","valid","validators","price","offerValue","offerPrice","image","file","src","description","formData","setFormData","isFormValid","onInputChangeHandler","event","url","target","array","slice","includes","push","prevState","URL","createObjectURL","files","isValid","validator","onSubmitHandler","a","preventDefault","match","product","FormData","append","sendPostAdminApi","response","data","error","onArrayChangeHandler","length","splice","onSubmit","el","i","display","xs","lg","xl","classes","productImage"],"mappings":"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","file":"static/js/27.136ca5be.chunk.js","sourcesContent":["import { Spinner } from \"react-bootstrap\";\r\nconst CButtonSpinner = () => {\r\n  return (\r\n    <>\r\n      <Spinner\r\n        as=\"span\"\r\n        animation=\"grow\"\r\n        size=\"sm\"\r\n        role=\"status\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default CButtonSpinner;\r\n","import { Button } from \"react-bootstrap\";\r\nimport CButtonSpinner from \"../Spinner/CButtonSpinner\";\r\nconst CButton = (props) => {\r\n  return (\r\n    <>\r\n      {props.control ? (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={() => props.click(props.input, props.index)}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n          input={props.input}\r\n        >\r\n          {props.loading && <CButtonSpinner />} {props.name}\r\n        </Button>\r\n      ) : (\r\n        <Button\r\n          variant={props.color}\r\n          onClick={props.click}\r\n          type={props.type}\r\n          style={{ minWidth: props.width }}\r\n          block={props.block}\r\n          disabled={props.disabled}\r\n        >\r\n          {props.loading ? <CButtonSpinner /> : props.name}\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default CButton;\r\n","const FormTextArea = (props) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label>{props.labelName}</label>\r\n      <textarea\r\n        className=\"form-control\"\r\n        readOnly={props.readOnly}\r\n        onChange={props.change}\r\n        value={props.value}\r\n        rows={props.rows}\r\n      >\r\n        {props.children}\r\n      </textarea>\r\n    </div>\r\n  );\r\n};\r\nexport default FormTextArea;\r\n","export const required = (value) => {\r\n  return value.trim() !== \"\";\r\n};\r\nexport const offer = (value) => {\r\n  if (value.trim() === \"\") {\r\n    return true;\r\n  } else {\r\n    return /^\\d+\\.?\\d{0,2}$/.test(value);\r\n  }\r\n};\r\n\r\nexport const decimal = (value) => {\r\n  return /^\\d+\\.?\\d{0,2}$/.test(value);\r\n};\r\nexport const imageType = (type) => {\r\n  const value = /\\.(jpg|jpeg|png|gif)$/.test(type.name);\r\n  console.log(\"result \", value);\r\n  return value;\r\n};\r\n","import { Alert } from \"react-bootstrap\";\r\n\r\nconst SAlert = (props) => {\r\n  return (\r\n    <Alert variant={props.color} onClose={props.close} dismissible>\r\n      {props.msg}\r\n    </Alert>\r\n  );\r\n};\r\nexport default SAlert;\r\n","const SFormSelect = (props) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n      <select\r\n        className=\"form-control\"\r\n        id={props.id}\r\n        value={props.value}\r\n        onChange={(e) => props.change(e, props.id)}\r\n        disabled={props.readOnly && \"readOnly\"}\r\n      >\r\n        {props.chooseOption && <option>Choose One Option</option>}\r\n        {props.options.map((option, index) => {\r\n          return (\r\n            <option key={index} value={option.toLowerCase()}>\r\n              {option}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\nexport default SFormSelect;\r\n","import { Col, Form } from \"react-bootstrap\";\r\nconst FormInput = (props) => {\r\n  //   console.log(props.id);\r\n  return (\r\n    <Col md={props.md} sm={props.sm}>\r\n      <Form.Group>\r\n        {props.label && <Form.Label>{props.label}</Form.Label>}\r\n        <Form.Control\r\n          type={props.type}\r\n          readOnly={props.readOnly}\r\n          onChange={(e) => props.change(e, props.id)}\r\n          value={props.value}\r\n          onBlur={props.blur}\r\n          list={props.list}\r\n          placeholder={props.placeHolder}\r\n        />\r\n      </Form.Group>\r\n    </Col>\r\n  );\r\n};\r\nexport default FormInput;\r\n","import { CButtonGroup, CButtonToolbar } from \"@coreui/react\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\n\r\nconst SButtonGroup = (props) => {\r\n  return (\r\n    <CButtonGroup className=\"mr-2\">\r\n      <CButton\r\n        color=\"dark\"\r\n        width=\"30%\"\r\n        type=\"submit\"\r\n        name={props.color}\r\n        block={false}\r\n        width=\"30%\"\r\n      />\r\n      <CButton\r\n        color=\"danger\"\r\n        width=\"30%\"\r\n        type=\"button\"\r\n        name=\"X\"\r\n        block={false}\r\n        width=\"30%\"\r\n        control={props.control}\r\n        input={props.input}\r\n        index={props.index}\r\n        click={props.click}\r\n      />\r\n    </CButtonGroup>\r\n  );\r\n};\r\nexport default SButtonGroup;\r\n","import { CCol } from \"@coreui/react\";\r\n\r\nconst SFormTextArea = (props) => {\r\n  return (\r\n    <CCol sm={12} md={12}>\r\n      <div className=\"form-group\">\r\n        <label>{props.labelName}</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          readOnly={props.readOnly}\r\n          onChange={(e) => props.change(e, props.id)}\r\n          value={props.value}\r\n          rows={props.rows}\r\n        >\r\n          {props.children}\r\n        </textarea>\r\n      </div>\r\n    </CCol>\r\n  );\r\n};\r\nexport default SFormTextArea;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"productImage\":\"Store_productImage__1ADiy\"};","import { useState } from \"react\";\r\nimport { CButtonToolbar, CCol, CRow } from \"@coreui/react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport CButton from \"src/Components/UI/Button/Button\";\r\nimport classes from \"./Store.module.css\";\r\nimport SFormSelect from \"./UI/FormSelect\";\r\nimport FormInput from \"./UI/FormInput\";\r\nimport { decimal, offer, required } from \"./UI/validator/Validator\";\r\nimport { sendPostAdminApi, sendPostApi } from \"src/service/appService\";\r\nimport SAlert from \"./UI/Alert/Alert\";\r\nimport SButtonGroup from \"./UI/SButtonGroup/SButtonGroup\";\r\nimport FormTextArea from \"src/Components/UI/Input/FormTextArea\";\r\nimport SFormTextArea from \"./UI/SFormTextArea\";\r\nconst Store = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [alert, setAlert] = useState({\r\n    msg: \"\",\r\n    status: \"\",\r\n    show: false,\r\n  });\r\n  const [change, setChange] = useState({ color: [\"black\"], height: [\"46cm\"] });\r\n  const [formData, setFormData] = useState({\r\n    name: {\r\n      value: \"\",\r\n      valid: false,\r\n      validators: [required],\r\n    },\r\n    price: {\r\n      value: \"\",\r\n      offerValue: \"\",\r\n      valid: false,\r\n      validators: [required, decimal],\r\n    },\r\n    offerPrice: {\r\n      value: \"\",\r\n      valid: true,\r\n      validators: [offer],\r\n    },\r\n    color: {\r\n      value: \"black\",\r\n      valid: true,\r\n      validators: [required],\r\n    },\r\n    image: {\r\n      value: \"\",\r\n      file: \"\",\r\n      valid: false,\r\n      src: \"\",\r\n      validators: [required],\r\n    },\r\n    description: {\r\n      value: \"\",\r\n      valid: false,\r\n      validators: [required],\r\n    },\r\n    height: { value: \"46cm\", valid: true, validators: [required] },\r\n    status: { value: \"active\", valid: true, validators: [required] },\r\n  });\r\n  let isFormValid = true;\r\n\r\n  const onInputChangeHandler = (event, input) => {\r\n    let value = event.target.value;\r\n    let url, file;\r\n    if (input === \"color\" || input === \"height\") {\r\n      let array = change[input].slice();\r\n      if (!array.includes(value)) {\r\n        array.push(value);\r\n        setChange((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            [input]: array,\r\n          };\r\n        });\r\n      }\r\n    }\r\n    if (input === \"image\") {\r\n      url = URL.createObjectURL(event.target.files[0]);\r\n      file = event.target.files[0];\r\n      value = event.target.value;\r\n    }\r\n    setFormData((prevState) => {\r\n      let isValid = true;\r\n      for (const validator of prevState[input].validators) {\r\n        isValid = isValid && validator(value);\r\n      }\r\n      if (input === \"image\") {\r\n        const updatedForm = {\r\n          ...prevState,\r\n          [input]: {\r\n            ...prevState[input],\r\n            value: value,\r\n            file: file,\r\n            src: url,\r\n            valid: isValid,\r\n          },\r\n        };\r\n        return updatedForm;\r\n      } else {\r\n        const updatedForm = {\r\n          ...prevState,\r\n          [input]: {\r\n            ...prevState[input],\r\n            value: value,\r\n            valid: isValid,\r\n          },\r\n        };\r\n        return updatedForm;\r\n      }\r\n    });\r\n  };\r\n  //check if it is valid\r\n  for (const input in formData) {\r\n    isFormValid = isFormValid && formData[input].valid;\r\n  }\r\n\r\n  const onSubmitHandler = async (e) => {\r\n    e.preventDefault();\r\n    if (formData.image.file.name.match(/\\.(jpg|jpeg|png|gif)$/)) {\r\n      var product = new FormData();\r\n      product.append(\"name\", formData.name.value);\r\n      product.append(\"price\", formData.price.value);\r\n      product.append(\"offerPrice\", formData.offerPrice.value);\r\n      product.append(\"file\", formData.image.file);\r\n      product.append(\"color\", change.color);\r\n      product.append(\"height\", change.height);\r\n      product.append(\"description\", formData.description.value);\r\n      product.append(\"status\", formData.status.value);\r\n      try {\r\n        setLoading(true);\r\n        const response = await sendPostAdminApi(\"store/add-product\", product);\r\n        setAlert((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            msg: response.data.data.msg,\r\n            status: \"success\",\r\n            show: true,\r\n          };\r\n        });\r\n        setLoading(false);\r\n\r\n        setFormData((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            name: {\r\n              ...prevState[\"name\"],\r\n              value: \"\",\r\n              valid: false,\r\n            },\r\n            price: {\r\n              ...prevState[\"price\"],\r\n              value: \"\",\r\n              valid: false,\r\n            },\r\n            offerPrice: {\r\n              ...prevState[\"offerPrice\"],\r\n              value: \"\",\r\n              valid: true,\r\n            },\r\n            description: {\r\n              ...prevState[\"description\"],\r\n              value: \"\",\r\n              valid: false,\r\n            },\r\n            image: {\r\n              ...prevState[\"image\"],\r\n              src: \"\",\r\n              value: \"\",\r\n              valid: false,\r\n            },\r\n          };\r\n        });\r\n\r\n        setChange((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            color: [\"black\"],\r\n            height: [\"46cm\"],\r\n          };\r\n        });\r\n      } catch (error) {\r\n        setAlert((prevState) => {\r\n          return {\r\n            ...prevState,\r\n            msg: error.response.data.error,\r\n            status: \"danger\",\r\n            show: true,\r\n          };\r\n        });\r\n      }\r\n    } else {\r\n      setAlert((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          msg: \"Image that you have uploaded is invalid and it should be one of the following(jpg|jpeg|png|gif)\",\r\n          status: \"danger\",\r\n          show: true,\r\n        };\r\n      });\r\n    }\r\n  };\r\n  const closeAlertHandler = () => {\r\n    setAlert((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        msg: \"\",\r\n        status: \"\",\r\n        show: false,\r\n      };\r\n    });\r\n  };\r\n\r\n  const onArrayChangeHandler = (type, index) => {\r\n    let array = change[type].slice();\r\n    if (array.length !== 1) {\r\n      array.splice(index, 1);\r\n      setChange((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          [type]: array,\r\n        };\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {alert.show && (\r\n        <SAlert\r\n          color={alert.status}\r\n          msg={alert.msg}\r\n          close={closeAlertHandler}\r\n        />\r\n      )}\r\n\r\n      <Form onSubmit={onSubmitHandler}>\r\n        <CRow>\r\n          <CCol md={6} sm={12}>\r\n            <CRow>\r\n              <FormInput\r\n                md={12}\r\n                sm={12}\r\n                label=\"Product Name\"\r\n                id=\"name\"\r\n                type=\"text\"\r\n                readOnly={false}\r\n                value={formData.name.value}\r\n                change={onInputChangeHandler}\r\n              />\r\n            </CRow>\r\n            <CRow>\r\n              <CCol md={4} sm={12}>\r\n                <FormInput\r\n                  md={12}\r\n                  sm={12}\r\n                  label=\"Price($)\"\r\n                  id=\"price\"\r\n                  type=\"text\"\r\n                  readOnly={false}\r\n                  placeHolder=\"$0.00\"\r\n                  value={formData.price.value}\r\n                  change={onInputChangeHandler}\r\n                />\r\n              </CCol>\r\n              <CCol md={4} sm={12}>\r\n                <FormInput\r\n                  md={12}\r\n                  sm={12}\r\n                  label=\"Offer Price($)\"\r\n                  id=\"offerPrice\"\r\n                  type=\"text\"\r\n                  readOnly={false}\r\n                  placeHolder=\"$0.00\"\r\n                  value={formData.offerPrice.value}\r\n                  change={onInputChangeHandler}\r\n                />\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <FormInput\r\n                md={12}\r\n                sm={12}\r\n                label=\"Product Image\"\r\n                id=\"image\"\r\n                type=\"file\"\r\n                readOnly={false}\r\n                value={formData.image.value}\r\n                change={onInputChangeHandler}\r\n              />\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <div className=\"mb-2\">Product Color</div>\r\n                {change.color.length > 0 && (\r\n                  <CButtonToolbar>\r\n                    {change.color.map((el, i) => {\r\n                      return (\r\n                        <div className=\"mb-2\" key={i}>\r\n                          <SButtonGroup\r\n                            color={el}\r\n                            control={true}\r\n                            input=\"color\"\r\n                            index={i}\r\n                            click={onArrayChangeHandler}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </CButtonToolbar>\r\n                )}\r\n\r\n                <div style={{ display: \"inline-block\" }}>\r\n                  <SFormSelect\r\n                    md={4}\r\n                    sm={12}\r\n                    label={false}\r\n                    id=\"color\"\r\n                    options={[\"black\", \"white\", \"walnet\", \"Natural\"]}\r\n                    change={onInputChangeHandler}\r\n                  />\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <CCol>\r\n                <div className=\"mb-2\">Product Height</div>\r\n                {change.height.length > 0 && (\r\n                  <CButtonToolbar>\r\n                    {change.height.map((el, i) => {\r\n                      return (\r\n                        <div className=\"mb-2\" key={i}>\r\n                          <SButtonGroup\r\n                            color={el}\r\n                            control={true}\r\n                            input=\"height\"\r\n                            index={i}\r\n                            click={onArrayChangeHandler}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </CButtonToolbar>\r\n                )}\r\n                <div style={{ display: \"inline-block\" }}>\r\n                  <SFormSelect\r\n                    md={12}\r\n                    sm={12}\r\n                    label={false}\r\n                    id=\"height\"\r\n                    options={[\"46cm\", \"68cm\", \"74cm\"]}\r\n                    change={onInputChangeHandler}\r\n                  />\r\n                </div>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow>\r\n              <SFormTextArea\r\n                rows=\"5\"\r\n                labelName=\"Product Description\"\r\n                id=\"description\"\r\n                type=\"textarea\"\r\n                readOnly={false}\r\n                value={formData.description.value}\r\n                change={onInputChangeHandler}\r\n              ></SFormTextArea>\r\n            </CRow>\r\n            <CRow className=\"ml-1\">\r\n              <SFormSelect\r\n                md={12}\r\n                sm={12}\r\n                label=\"Product Status\"\r\n                id=\"status\"\r\n                options={[\"draft\", \"active\"]}\r\n                value={formData.status.value}\r\n                change={onInputChangeHandler}\r\n              />\r\n            </CRow>\r\n\r\n            <CRow className=\"mx-auto\">\r\n              <CButton\r\n                color=\"success\"\r\n                width=\"30%\"\r\n                type=\"submit\"\r\n                name=\"Save Product\"\r\n                block={false}\r\n                width=\"30%\"\r\n                loading={loading}\r\n                disabled={isFormValid ? false : true}\r\n              />\r\n            </CRow>\r\n          </CCol>\r\n          <CCol md={5} sm={12} className=\"d-flex\">\r\n            <CCol\r\n              xs={4}\r\n              sm={3}\r\n              md={4}\r\n              lg={4}\r\n              xl={4}\r\n              className=\"mx-auto my-auto\"\r\n            >\r\n              {formData.image.src && (\r\n                <img\r\n                  src={formData.image.src}\r\n                  className={classes.productImage}\r\n                />\r\n              )}\r\n            </CCol>\r\n          </CCol>\r\n        </CRow>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nexport default Store;\r\n"],"sourceRoot":""}